window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"ultk": {"fullname": "ultk", "modulename": "ultk", "kind": "module", "doc": "<h1 id=\"the-unnatural-language-toolkit-ultk\">The Unnatural Language ToolKit (ULTK)</h1>\n\n<p><img alt=\"Four examples of many recent results showing that natural languages are optimized for efficient communication.\" src=\"https://raw.githubusercontent.com/CLMBRs/ultk/main/images/plots.jpeg\" width=\"100%\" /></p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>ULTK is a software library that aims to support <a href=\"https://github.com/CLMBRs/ultk/blob/main/images/mit-altk.pdf\">efficient communication analyses</a> of natural language. This is a line of research that aims to explain why natural languages have the structure that they do in terms competing pressures to minimize cognitive complexity and maximize communicative accuracy.</p>\n\n<p>Key features:</p>\n\n<ul>\n<li>Primitives for constructing semantic spaces, expressions, and languages</li>\n<li>Tools for measuring informativity of languages, communicative success of RSA speakers and listeners</li>\n<li>Language population sampling and optimization w.r.t Pareto fronts</li>\n<li>Rate-Distortion and Information Bottleneck style analyses</li>\n</ul>\n\n<p>ULTK is a long term project and it is currently in its early stages. It is intended to help lower the barrier to entry for certain research in computational semantics, and to unify methodologies. If you find something confusing, please open an issue. If you have a phenomena of interest in linguistic semantics that you want to run an efficient communication analysis on, please contact the contributors.</p>\n\n<p>Read the <a href=\"https://clmbr.shane.st/ultk\">documentation</a>.</p>\n\n<h2 id=\"installing-ultk\">Installing ULTK</h2>\n\n<p>First, set up a virtual environment (e.g. via <a href=\"https://docs.conda.io/en/latest/miniconda.html\">miniconda</a>, <code>conda create -n ultk python=3.11</code>, and <code>conda activate ultk</code>).</p>\n\n<ol>\n<li><p>Download or clone this repository and navigate to the root folder.</p></li>\n<li><p>Install ULTK (We recommend doing this inside a virtual environment)</p>\n\n<p><code>pip install -e .</code></p></li>\n</ol>\n\n<h2 id=\"getting-started\">Getting started</h2>\n\n<ul>\n<li>Check out the <a href=\"https://github.com/CLMBRs/ultk/tree/main/src/examples\">examples</a>, starting with a basic signaling game.  The examples folder also contains a simiple efficient communication analysis of <a href=\"https://github.com/CLMBRs/ultk/tree/main/src/examples/indefinites\">indefinites</a>.</li>\n<li>To see more scaled up usage examples, visit the codebase for an efficient communication analysis of <a href=\"https://github.com/nathimel/modals-effcomm\">modals</a> or <a href=\"https://github.com/nathimel/rdsg\">sim-max games</a>.</li>\n<li>For an introduction to efficient communication research, here is a <a href=\"https://www.annualreviews.org/doi/abs/10.1146/annurev-linguistics-011817-045406\">survey paper</a> of the field.</li>\n<li>For an introduction to the RSA framework, see <a href=\"http://www.problang.org/\">this online textbook</a>.</li>\n</ul>\n\n<h2 id=\"modules\">Modules</h2>\n\n<p>There are two modules. The first is <a href=\"https://clmbr.shane.st/ultk/ultk/effcomm.html\">ultk.effcomm</a>, which includes methods for measuring informativity of languages and/or communicative success of Rational Speech Act agents, and for language population sampling and optimization w.r.t Pareto fronts.</p>\n\n<p>The second module is <a href=\"https://clmbr.shane.st/ultk/ultk/language.html\">ultk.language</a>, which contains primitives for constructing semantic spaces, expressions, and languages.  It also has a <code>grammar</code> module which can be used for building expressions in a Language of Thought and measuring complexity in terms of minimum description length, as well as for natural language syntax.</p>\n\n<p>The source code is available on github <a href=\"https://github.com/CLMBRs/ultk\">here</a>.</p>\n\n<h2 id=\"testing\">Testing</h2>\n\n<p>Unit tests are written in <a href=\"https://docs.pytest.org/en/7.3.x/\">pytest</a> and executed via running <code>pytest</code> in the <code>src/tests</code> folder. </p>\n\n<h2 id=\"references\">References</h2>\n\n<p><details>\n<summary>Figures:</summary></p>\n\n<blockquote>\n  <p>Kinship Categories Across Languages Reflect General Communicative Principles | Science. (n.d.). Retrieved February 27, 2023, from <a href=\"https://www.science.org/doi/10.1126/science.1218811\">https://www.science.org/doi/10.1126/science.1218811</a></p>\n</blockquote>\n\n<blockquote>\n  <p>Zaslavsky, N., Kemp, C., Regier, T., &amp; Tishby, N. (2018). Efficient compression in color naming and its evolution. Proceedings of the National Academy of Sciences, 115(31), 7937\u20137942. <a href=\"https://doi.org/10.1073/pnas.1800521115\">https://doi.org/10.1073/pnas.1800521115</a></p>\n</blockquote>\n\n<blockquote>\n  <p>Deni\u0107, M., Steinert-Threlkeld, S., &amp; Szymanik, J. (2022). Indefinite Pronouns Optimize the Simplicity/Informativeness Trade-Off. Cognitive Science, 46(5), e13142. <a href=\"https://doi.org/10.1111/cogs.13142\">https://doi.org/10.1111/cogs.13142</a></p>\n</blockquote>\n\n<blockquote>\n  <p>Steinert-Threlkeld, S. (2021). Quantifiers in Natural Language: Efficient Communication and Degrees of Semantic Universals. Entropy, 23(10), Article 10. <a href=\"https://doi.org/10.3390/e23101335\">https://doi.org/10.3390/e23101335</a></p>\n</blockquote>\n\n<p></details></p>\n\n<p><details>\n<summary>Links:</summary></p>\n\n<blockquote>\n  <p>Imel, N. (2023). The evolution of efficient compression in signaling games. PsyArXiv. <a href=\"https://doi.org/10.31234/osf.io/b62de\">https://doi.org/10.31234/osf.io/b62de</a></p>\n</blockquote>\n\n<blockquote>\n  <p>Imel, N., &amp; Steinert-Threlkeld, S. (2022). Modal semantic universals optimize the simplicity/informativeness trade-off. Semantics and Linguistic Theory, 1(0), Article 0. <a href=\"https://doi.org/10.3765/salt.v1i0.5346\">https://doi.org/10.3765/salt.v1i0.5346</a></p>\n</blockquote>\n\n<blockquote>\n  <p>Kemp, C., Xu, Y., &amp; Regier, T. (2018). Semantic Typology and Efficient Communication. Annual Review of Linguistics, 4(1), 109\u2013128. <a href=\"https://doi.org/10.1146/annurev-linguistics-011817-045406\">https://doi.org/10.1146/annurev-linguistics-011817-045406</a></p>\n</blockquote>\n\n<p></details></p>\n"}, "ultk.effcomm": {"fullname": "ultk.effcomm", "modulename": "ultk.effcomm", "kind": "module", "doc": "<p>Tools for measuring languages for communicative efficiency. </p>\n\n<p>Submodules divide the labor of a computational experiment performing an efficiency analysis of a language into several parts: generating and sampling the space of possible languages, measuring their properties, and determining which languages optimize efficient trade-offs w.r.t these properties.</p>\n\n<p>The <code>altk.effcomm.sampling</code> submodule implements several methods for generating hypothetically possible languages of a given type, by sampling from a set of possible expressions, or permuting the expression-meaning mapping of an existing language.</p>\n\n<p>The <code>altk.effcomm.optimization</code> submodule contains a general implementation of an evolutionary algorithm, which can be used to estimate a Pareto frontier of optimal solutions to an efficiency trade-off. It can also be used as a technique for randomly exploring the space of possible languages.</p>\n\n<p>The <code>altk.effcomm.tradeoff</code> submodule contains tools for measuring a pool of languages for various properties, finding which languages are Pareto dominant with respect to two properties, and setting attributes of the language objects for further analysis.</p>\n\n<p>The <code>altk.effcomm.analysis</code> submodule contains tools for performing numerical analyses and producing paradigmatic plots of languages in 2D trade-off space.</p>\n\n<p>The <code>altk.effcomm.information</code> submodule contains tools for information theory based analyses of the communicative efficiency of languages. It includes methods for Rate-Distortion style (including the Information Bottleneck) analyses.</p>\n\n<p>The <code>altk.effcomm.agent</code> submodule implements classes for constructing various speakers and listeners of a language. These are typically used in static analyses of informativity of a language, and are unified abstractions from the Rational Speech Act framework. They can also be used for dynamic analyses, however (see the <a href=\"https://clmbr.shane.st/altk/src/examples/signaling_game\">signaling game example</a>).</p>\n\n<p>The <code>altk.effcomm.informativity</code> submodule implements tools for computing the literal or pragmatic informativity of a language, based on speaker/listener  abstractions described above.</p>\n\n<p>The <code>altk.effcomm.util</code> submodule contains various helper functions for working with the probability distributions associated with ALTK abstractions.</p>\n"}, "ultk.effcomm.agent": {"fullname": "ultk.effcomm.agent", "modulename": "ultk.effcomm.agent", "kind": "module", "doc": "<p>Classes for representing communicative agents, such as Senders and Receivers figuring in Lewis-Skyrms signaling games, literal and pragmatic agents in the Rational Speech Act framework, etc.</p>\n"}, "ultk.effcomm.agent.CommunicativeAgent": {"fullname": "ultk.effcomm.agent.CommunicativeAgent", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent", "kind": "class", "doc": "<p></p>\n"}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.__init__", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.CommunicativeAgent.language": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.language", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.language", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.shape", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.shape", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.weights", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.weights", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.normalized_weights", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.normalized_weights", "kind": "function", "doc": "<p>Return the normalized weights of a CommunicativeAgent so that each row vector represents a probability distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.initialize_weights", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.initialize_weights", "kind": "function", "doc": "<p>Initialize the agent's weight matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>weights:</strong>  an np.ndarray representing the weights to initialize the agent with. By default None, and the agent's weights will be initialized uniformly.</li>\n<li><strong>initial:</strong>  {'ones', 'random'} a str reprsenting the initialization method to use. If 'ones' (default), initialize the weight matrix with <code>np.ones</code>. If 'random', initalize the weight matrix from <code>np.random.uniform</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"s1\">&#39;ones&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.referent_to_index", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.referent_to_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">referent</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.index_to_referent", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.index_to_referent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.expression_to_index", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.expression_to_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.index_to_expression", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.index_to_expression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.strategy_to_indices", "kind": "function", "doc": "<p>Maps communicative strategies to weights.</p>\n\n<p>Given a expression and referent, access the corresponding weight coordinate.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>strategy:</strong>  a dict of the form {\"referent\": Referent, \"expression\": expression} representing an instance of communicative behavior, which we may call a communicative strategy for this agent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">strategy</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.sample_strategy", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.sample_strategy", "kind": "function", "doc": "<p>Sample a communicative strategy (e.g., a word for Speaker's intended referent, or interpretation for Listener's heard word) by uniformly sampling from a row vector of the agent's weight matrix specified by the index.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index:</strong>  the integer index representing a row of the weight matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the integer index of the agent's choice</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"fullname": "ultk.effcomm.agent.CommunicativeAgent.to_language", "modulename": "ultk.effcomm.agent", "qualname": "CommunicativeAgent.to_language", "kind": "function", "doc": "<p>Get a language from the agent, representing its current (possibly learned) communicative behavior.</p>\n\n<h6 id=\"this-function-uses\">This function uses:</h6>\n\n<blockquote>\n  <ol>\n  <li>the agent's weight matrix,</li>\n  <li>the set of expression forms, and</li>\n  <li>the set of referents</li>\n  </ol>\n</blockquote>\n\n<p>from the language the agent was initialized with to generate a new language accurately reflecting the new expression meanings, e.g. how the agent interprets expressions as meaning zero or more referents.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>threshold:</strong>  a float in [0,1] representing the cutoff for determining if a meaning (referent) can be communicated by a expression. Because weights are not initialized to 0, it is a good idea to set nonzero values as the threshold.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a Language corresponding to the form-meaning mapping defined by the communicative agent's weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;complexity&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;accuracy&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.Speaker": {"fullname": "ultk.effcomm.agent.Speaker", "modulename": "ultk.effcomm.agent", "qualname": "Speaker", "kind": "class", "doc": "<p></p>\n", "bases": "CommunicativeAgent"}, "ultk.effcomm.agent.Speaker.__init__": {"fullname": "ultk.effcomm.agent.Speaker.__init__", "modulename": "ultk.effcomm.agent", "qualname": "Speaker.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.Speaker.S": {"fullname": "ultk.effcomm.agent.Speaker.S", "modulename": "ultk.effcomm.agent", "qualname": "Speaker.S", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.Speaker.normalized_weights": {"fullname": "ultk.effcomm.agent.Speaker.normalized_weights", "modulename": "ultk.effcomm.agent", "qualname": "Speaker.normalized_weights", "kind": "function", "doc": "<p>Get the normalized weights of a Speaker.</p>\n\n<p>Each row vector represents a conditional probability distribution over expressions, P(e | m).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.Listener": {"fullname": "ultk.effcomm.agent.Listener", "modulename": "ultk.effcomm.agent", "qualname": "Listener", "kind": "class", "doc": "<p></p>\n", "bases": "CommunicativeAgent"}, "ultk.effcomm.agent.Listener.__init__": {"fullname": "ultk.effcomm.agent.Listener.__init__", "modulename": "ultk.effcomm.agent", "qualname": "Listener.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.Listener.R": {"fullname": "ultk.effcomm.agent.Listener.R", "modulename": "ultk.effcomm.agent", "qualname": "Listener.R", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.Listener.normalized_weights": {"fullname": "ultk.effcomm.agent.Listener.normalized_weights", "modulename": "ultk.effcomm.agent", "qualname": "Listener.normalized_weights", "kind": "function", "doc": "<p>Normalize the weights of a Listener so that each row vector for the heard expression e represents a conditional probability distribution over referents P(m | e).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.agent.LiteralSpeaker": {"fullname": "ultk.effcomm.agent.LiteralSpeaker", "modulename": "ultk.effcomm.agent", "qualname": "LiteralSpeaker", "kind": "class", "doc": "<p>A literal speaker chooses utterances without any reasoning about other agents. The literal speaker's conditional probability distribution P(e|m) is uniform over all expressions that can be used to communicate a particular meaning. This is in contrast to a pragmatic speaker, whose conditional distribution is not uniform in this way, but instead biased towards choosing expressions that are less likely to be misinterpreted by some listener.</p>\n", "bases": "Speaker"}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"fullname": "ultk.effcomm.agent.LiteralSpeaker.__init__", "modulename": "ultk.effcomm.agent", "qualname": "LiteralSpeaker.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.LiteralSpeaker.S": {"fullname": "ultk.effcomm.agent.LiteralSpeaker.S", "modulename": "ultk.effcomm.agent", "qualname": "LiteralSpeaker.S", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.LiteralListener": {"fullname": "ultk.effcomm.agent.LiteralListener", "modulename": "ultk.effcomm.agent", "qualname": "LiteralListener", "kind": "class", "doc": "<p>A naive literal listener interprets utterances without any reasoning about other agents. Its conditional probability distribution P(m|e) for guessing meanings is uniform over all meanings that can be denoted by the particular expression heard. This is in contrast to a pragmatic listener, whose conditional distribution is biased to guess meanings that a pragmatic speaker most likely intended.</p>\n", "bases": "Listener"}, "ultk.effcomm.agent.LiteralListener.__init__": {"fullname": "ultk.effcomm.agent.LiteralListener.__init__", "modulename": "ultk.effcomm.agent", "qualname": "LiteralListener.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.LiteralListener.R": {"fullname": "ultk.effcomm.agent.LiteralListener.R", "modulename": "ultk.effcomm.agent", "qualname": "LiteralListener.R", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.PragmaticSpeaker": {"fullname": "ultk.effcomm.agent.PragmaticSpeaker", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticSpeaker", "kind": "class", "doc": "<p>A pragmatic speaker chooses utterances based on how a listener would interpret them. A pragmatic speaker may be initialized with any kind of listener, e.g. literal or pragmatic -- meaning the recursive reasoning can be modeled up to arbitrary depth.</p>\n", "bases": "Speaker"}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"fullname": "ultk.effcomm.agent.PragmaticSpeaker.__init__", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticSpeaker.__init__", "kind": "function", "doc": "<p>Initialize the |M|-by-|E| matrix, S, corresponding to the pragmatic speaker's conditional probability distribution over expressions given meanings.</p>\n\n<p>The pragmatic speaker chooses expressions to communicate their intended meaning according to:</p>\n\n<p>$P(e | m) \\propto \\exp(t * u(e,m))$</p>\n\n<p>where $t \\in [0,1]$ is a temperature parameter and utility $u$ is defined</p>\n\n<p>$u(e , m) := \\log(P_{\\text{Listener}}(m | e))$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the language with |M| meanings and |E| expressions defining the size of S.</li>\n<li><strong>listener:</strong>  a communicative agent storing a matrix R representing the conditional distribution over expressions given meanings.</li>\n<li><strong>temperature:</strong>  a float \\in [0,1], representing how `optimally rational' the pragmatic speaker is; 1.0 is chosen when no particular assumptions about rationality are made.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">listener</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Listener</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"fullname": "ultk.effcomm.agent.PragmaticSpeaker.S", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticSpeaker.S", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.PragmaticListener": {"fullname": "ultk.effcomm.agent.PragmaticListener", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticListener", "kind": "class", "doc": "<p>A pragmatic listener interprets utterances based on their expectations about a pragmatic speaker's decisions. A pragmatic listener may be initialized with any kind of speaker, e.g. literal or pragmatic -- meaning the recursive reasoning can be modeled up to arbitrary depth.</p>\n", "bases": "Listener"}, "ultk.effcomm.agent.PragmaticListener.__init__": {"fullname": "ultk.effcomm.agent.PragmaticListener.__init__", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticListener.__init__", "kind": "function", "doc": "<p>Initialize the |E|-by-|M| matrix, R, corresponding to the pragmatic listener's conditional probability distribution over meanings given expressions.</p>\n\n<p>The pragmatic listener chooses meanings as their best guesses of the expression they heard according to:</p>\n\n<p>$P(m | e) \\propto P_{\\text{PragmaticSpeaker}}(e | m)$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the language with |M| meanings and |E| expressions defining the size of R.</li>\n<li><strong>speaker:</strong>  a communicative agent storing a matrix S representing the  conditional distribution over expressions given meanings.</li>\n<li><strong>prior:</strong>  a diagonal matrix of size |M|-by-|M| representing the communicative need probabilities for meanings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">speaker</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Speaker</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.effcomm.agent.PragmaticListener.R": {"fullname": "ultk.effcomm.agent.PragmaticListener.R", "modulename": "ultk.effcomm.agent", "qualname": "PragmaticListener.R", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, "ultk.effcomm.agent.BayesianListener": {"fullname": "ultk.effcomm.agent.BayesianListener", "modulename": "ultk.effcomm.agent", "qualname": "BayesianListener", "kind": "class", "doc": "<p>A Bayesian reciever chooses an interpretation according to p(meaning | word), where</p>\n\n<h1 id=\"bug-this-is-extremely-misleading-since-we-basically-only-use-this-function-for-ib-and-ib-assumes-a-deterministic-bayes-derived-listener\">BUG: This is extremely misleading since we basically only use this function for IB, and IB assumes a DETERMINISTIC bayes-derived listener.</h1>\n\n<p>$P(m | w) = \\frac{P(M | W) \\cdot P(M)} { P(W) }$</p>\n\n<p>Furthermore, we sometimes require that each word w is deterministically interpreted as meaning $\\hat{m}$ as follows:</p>\n\n<h1 id=\"bug-this-says-nothing-about-determinism\">BUG: This says nothing about determinism.</h1>\n\n<p>$\\hat{m}_{w}(u) = \\sum_m p(m|w) \\cdot m(u)$</p>\n\n<p>See ultk.effcomm.information for more details.</p>\n", "bases": "Listener"}, "ultk.effcomm.agent.BayesianListener.__init__": {"fullname": "ultk.effcomm.agent.BayesianListener.__init__", "modulename": "ultk.effcomm.agent", "qualname": "BayesianListener.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">speaker</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Speaker</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "ultk.effcomm.analysis": {"fullname": "ultk.effcomm.analysis", "modulename": "ultk.effcomm.analysis", "kind": "module", "doc": "<p>Functions for analyzing and formatting the results of the simplicity/informativeness trade-off.</p>\n"}, "ultk.effcomm.analysis.get_dataframe": {"fullname": "ultk.effcomm.analysis.get_dataframe", "modulename": "ultk.effcomm.analysis", "qualname": "get_dataframe", "kind": "function", "doc": "<p>Get a pandas DataFrame for a list of languages containing efficient communication data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>languages:</strong>  the list of languages to map into a dataframe.</li>\n<li><strong>columns:</strong>  the list of keys to a language's <code>data</code> dictionary attribute, which will comprise the columns of the resulting dataframe. By default will use all items of each language's <code>data</code> dictionary.</li>\n<li><strong>subset:</strong>  the columns to subset for duplicates</li>\n<li><strong>duplicates:</strong>  {\"drop\", \"count\", \"leave\"} whether to drop, count, or do nothing with duplicates. By default is set to \"leave\" which will leave duplicates in the dataframe.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>data: a pandas DataFrame with rows as individual languages, with the columns specifying their data.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;complexity&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;comm_cost&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">duplicates</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;leave&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.analysis.pearson_analysis": {"fullname": "ultk.effcomm.analysis.pearson_analysis", "modulename": "ultk.effcomm.analysis", "qualname": "pearson_analysis", "kind": "function", "doc": "<p>Measures pearson correlation coefficient for naturalness with a property.</p>\n\n<p>Use nonparametric bootstrap for confidence intervals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  a DataFrame representing the pool of measured languages</li>\n<li><strong>predictor:</strong>  a string representing the column to measure pearson r with</li>\n<li><strong>property:</strong>  a string representing a column to measure pearson r with the predictor column</li>\n<li><strong>num_bootstrap_samples:</strong>  how many samples to bootstrap from the original data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict of the pearson correlation coefficient for the predictor and the property, and bootstrapped confidence intervals for this coefficient, e.g.</p>\n\n<pre><code>{\n\"rho\": (a float between -1 and 1),\n\"confidence_intervals\": (a pandas Dataframe with the columns [\n    'bootstrap_sample_percent', 'low', 'high'\n])\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">predictor</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">property</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">num_bootstrap_samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.analysis.trade_off_means": {"fullname": "ultk.effcomm.analysis.trade_off_means", "modulename": "ultk.effcomm.analysis", "qualname": "trade_off_means", "kind": "function", "doc": "<p>Get a dataframe with the mean tradeoff data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  a str representing the subset of the population to observe mean properties for, e.g. \"natural\" or \"population\".</li>\n<li><strong>df:</strong>  a pandas DataFrame containing data of a language population to take the means of.</li>\n<li><strong>prperties:</strong>  the properties to take means of, corresponding to columns of <code>df</code>.</li>\n</ul>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">natural_means</span> <span class=\"o\">=</span> <span class=\"n\">trade_off_means</span><span class=\"p\">(</span><span class=\"s2\">&quot;natural_means&quot;</span><span class=\"p\">,</span> <span class=\"n\">natural_data</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">population_means</span> <span class=\"o\">=</span> <span class=\"n\">trade_off_means</span><span class=\"p\">(</span><span class=\"s2\">&quot;population_means&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">means_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">natural_means</span><span class=\"p\">,</span> <span class=\"n\">dlsav_means</span><span class=\"p\">,</span> <span class=\"n\">population_means</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">means_df</span>\n<span class=\"go\">                    simplicity  complexity  informativity  optimality</span>\n<span class=\"go\">    name</span>\n<span class=\"go\">    natural_means       0.772222     16.4000       0.746296    0.952280</span>\n<span class=\"go\">    population_means    0.681068     22.9631       0.525118    0.832010</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.analysis.trade_off_ttest": {"fullname": "ultk.effcomm.analysis.trade_off_ttest", "modulename": "ultk.effcomm.analysis", "qualname": "trade_off_ttest", "kind": "function", "doc": "<p>Get a dataframe with a single-samples t-test results for a subpopulation against the full population.</p>\n\n<p>This is useful if we want to compare the optimality of natural languages to the full population of languages in an experiment. Because the property of 'being a natural language' is categorical, we use a single-samples T test.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sub_population:</strong>  a pandas DataFrame representing a subset of the population to take ttests against the full language population for <code>properties</code>.</li>\n<li><strong>population_means:</strong>  a dict containing properties as keys and the mean value of the full language population for that property.</li>\n<li><strong>properties:</strong>  a list of strings corresponding to columns of the <code>sub_population</code> DataFrame and keys of the <code>population_means</code> dict.</li>\n</ul>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">trade_off_ttest</span><span class=\"p\">(</span><span class=\"n\">natural_data</span><span class=\"p\">,</span> <span class=\"n\">population_means</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>\n<span class=\"go\">                        simplicity  complexity  informativity  optimality</span>\n<span class=\"go\">    stat</span>\n<span class=\"go\">    t-statistic          4.101937   -4.101937       3.126855    4.031027</span>\n<span class=\"go\">    Two-sided p-value    0.014830    0.014830       0.035292    0.015720</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sub_population</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">population_means</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information": {"fullname": "ultk.effcomm.information", "modulename": "ultk.effcomm.information", "kind": "module", "doc": "<p>Helper functions for Rate-Distortion based (including Information Bottleneck) efficient communication analyses.</p>\n"}, "ultk.effcomm.information.information_rate": {"fullname": "ultk.effcomm.information.information_rate", "modulename": "ultk.effcomm.information", "qualname": "information_rate", "kind": "function", "doc": "<p>Compute the information rate / complexity of the encoder q(w|m) as $I[W:M]$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.get_rd_curve": {"fullname": "ultk.effcomm.information.get_rd_curve", "modulename": "ultk.effcomm.information", "qualname": "get_rd_curve", "kind": "function", "doc": "<p>Use the Blahut Arimoto algorithm to obtain a list of (rate, distortion) points.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dist_mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">betas</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.expected_distortion": {"fullname": "ultk.effcomm.information.expected_distortion", "modulename": "ultk.effcomm.information", "qualname": "expected_distortion", "kind": "function", "doc": "<p>$D[X, \\hat{X}] = \\sum_x p(x) \\sum_{\\hat{x}} p(\\hat{x}|x) \\cdot d(x, \\hat{x})$</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p_x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p_xhat_x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dist_mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.compute_rate_distortion": {"fullname": "ultk.effcomm.information.compute_rate_distortion", "modulename": "ultk.effcomm.information", "qualname": "compute_rate_distortion", "kind": "function", "doc": "<p>Compute the information rate $I(X;\\hat{X})$ and total distortion $D[X, \\hat{X}]$ of a joint distribution defind by $P(X)$ and $P(\\hat{X}|X)$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>p_x:</strong>  array of shape <code>|X|</code> the prior probability of an input symbol (i.e., the source)</li>\n<li><strong>p_xhat_x:</strong>  array of shape <code>(|X|, |X_hat|)</code> the probability of an output symbol given the input</li>\n<li><strong>dist_mat:</strong>  array of shape <code>(|X|, |X_hat|)</code> representing the distoriton matrix between the input alphabet and the reconstruction alphabet.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a (rate, distortion) tuple containing the information rate (in bits) of compressing X into X_hat and the expected distortion between X, X_hat</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p_x</span>, </span><span class=\"param\"><span class=\"n\">p_xhat_x</span>, </span><span class=\"param\"><span class=\"n\">dist_mat</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.blahut_arimoto": {"fullname": "ultk.effcomm.information.blahut_arimoto", "modulename": "ultk.effcomm.information", "qualname": "blahut_arimoto", "kind": "function", "doc": "<p>Compute the rate-distortion function of an i.i.d distribution</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dist_mat:</strong>  array of shape <code>(|X|, |X_hat|)</code> representing the distortion matrix between the input alphabet and the reconstruction alphabet. dist_mat[i,j] = dist(x[i],x_hat[j]). In this context, X is a random variable representing the a speaker's meaning (target referent), and X_hat is a random variable representing a listener's meaning (guessed  referent).</li>\n<li><strong>p_x:</strong>  (1D array of shape <code>|X|</code>) representing the probability mass function of the source. In this context, the prior over states of nature.</li>\n<li><strong>beta:</strong>  (scalar) the slope of the rate-distoriton function at the point where evaluation is required</li>\n<li><strong>max_it:</strong>  max number of iterations</li>\n<li><strong>eps:</strong>  accuracy required by the algorithm: the algorithm stops if there is no change in distoriton value of more than 'eps' between consequtive iterations</li>\n<li><strong>ignore_converge:</strong>  whether to run the optimization until <code>max_it</code>, ignoring the stopping criterion specified by <code>eps</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict of the form</p>\n\n<pre><code>{\n    'final': a tuple of (rate, distortion) values. This is the rate (in bits) of compressing X into X_hat, and distortion between X, X_hat\n\n    'trajectory': a list of the (rate, distortion) points discovered during optimization\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dist_mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p_x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_it</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_converge</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.get_ib_curve": {"fullname": "ultk.effcomm.information.get_ib_curve", "modulename": "ultk.effcomm.information", "qualname": "get_ib_curve", "kind": "function", "doc": "<p>Get a list of (complexity, accuracy) or (complexity, distortion) points. A minimal wrapper of <code>get_bottleneck.</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>prior:</strong>  array of shape <code>|meanings|</code></li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code> representing the distribution over world states given meanings.</li>\n<li><strong>curve_type:</strong>  {'informativity', 'comm_cost'} specifies whether to return the (classic) IB axes of informativity vs. complexity, or the more Rate-Distortion Theory aligned axes of comm_cost vs. complexity. The latter can be obtained easily from the former by subtracting each informativity value from I[M:U], which is a constant for all languages in the same domain.</li>\n<li><strong>maxbeta:</strong>  the maximum value of beta to use to compute the curve.</li>\n<li><strong>minbeta:</strong>  the minimum value of beta to use.</li>\n<li><strong>numbeta:</strong>  the number of (equally-spaced) beta values to consider to compute the curve.</li>\n<li><strong>processes:</strong>  number of cpu threads to run in parallel (default = 1)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>an array of shape <code>(num_points, 2)</code> representing the list of (accuracy/comm_cost, complexity) points on the information plane.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">maxbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">minbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">numbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">processes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">curve_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;informativity&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.get_bottleneck": {"fullname": "ultk.effcomm.information.get_bottleneck", "modulename": "ultk.effcomm.information", "qualname": "get_bottleneck", "kind": "function", "doc": "<p>Compute the IB curve bound (I[M:W] vs. I[W:U]). We use the embo package, which has support for smoothing any non-monotonicity in the bound resulting from BA optimization getting stuck in local minima.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>prior:</strong>  array of shape <code>|meanings|</code></li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code> representing the distribution over world states given meanings.</li>\n<li><strong>curve_type:</strong>  {'informativity', 'comm_cost'} specifies whether to return the (classic) IB axes of informativity vs. complexity, or the more Rate-Distortion Theory aligned axes of comm_cost vs. complexity. The comm_cost can be obtained easily from informativity by subtracting each informativity value from I[M:U], which is a constant for all languages in the same domain.</li>\n<li><strong>maxbeta:</strong>  the maximum value of beta to use to compute the curve.</li>\n<li><strong>minbeta:</strong>  the minimum value of beta to use.</li>\n<li><strong>numbeta:</strong>  the number of (equally-spaced) beta values to consider to compute the curve.</li>\n<li><strong>processes:</strong>  number of cpu threads to run in parallel (default = 1)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict containing the coordinates and encoders corresponding to IB optima, of the form</p>\n\n<pre><code>{\n\"encoders\": an array of shape `(num_meanings, num_words)`,\n\n\"coordinates\": a tuple of arrays `(complexity, accuracy, comm_cost)` each of shape (`numbeta`,)\n\"beta\": an array of shape (`numbeta`,) corresponding to the actually used betas after non-monotonicity corrections.\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">maxbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">minbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">numbeta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">processes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_complexity": {"fullname": "ultk.effcomm.information.ib_complexity", "modulename": "ultk.effcomm.information", "qualname": "ib_complexity", "kind": "function", "doc": "<p>Compute the IB encoder complexity of a language $I[M:W]$.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_informativity": {"fullname": "ultk.effcomm.information.ib_informativity", "modulename": "ultk.effcomm.information", "qualname": "ib_informativity", "kind": "function", "doc": "<p>Compute the expected informativity (accuracy) $I[W:U]$ of a lexicon.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the Language to measure for informativity</li>\n<li><strong>prior:</strong>  communicative need distribution</li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code> representing the distribution over world states given meanings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the informativity of the language I[W:U] in bits.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_comm_cost": {"fullname": "ultk.effcomm.information.ib_comm_cost", "modulename": "ultk.effcomm.information", "qualname": "ib_comm_cost", "kind": "function", "doc": "<p>Compute the IB communicative cost, i.e. expected KL-divergence betweeen speaker and listener meanings, for a language.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the Language to measure for communicative cost</li>\n<li><strong>prior:</strong>  communicative need distribution</li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code> representing the distribution over world states given meanings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the communicative cost, $\\mathbb{E}[D_{KL}[M || \\hat{M}]] = I[M:U] - I[W:U]$ in bits.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"fullname": "ultk.effcomm.information.language_to_ib_encoder_decoder", "modulename": "ultk.effcomm.information", "qualname": "language_to_ib_encoder_decoder", "kind": "function", "doc": "<p>Convert a Language, a mapping of words to meanings, to IB encoder, q(w|m) and IB decoder q(m|w).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the lexicon from which to infer a speaker (encoder).</li>\n<li><strong>prior:</strong>  communicative need distribution</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict of the form\n  {\n      \"encoder\": np.ndarray of shape <code>(|meanings|, |words|)</code>,\n      \"decoder\": np.ndarray of shape <code>(|words|, |meanings|)</code>,\n  }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_accuracy": {"fullname": "ultk.effcomm.information.ib_accuracy", "modulename": "ultk.effcomm.information", "qualname": "ib_accuracy", "kind": "function", "doc": "<p>Return the accuracy of the lexicon I[W:U]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoder:</strong>  array of shape <code>(|M|, |W|)</code> representing P(W | M)</li>\n<li><strong>decoder:</strong>  array of shape <code>(|W|, |M|)</code> representing P(M | W)</li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|M|, |U|)</code> representing P(U | M)</li>\n<li><strong>prior:</strong>  array of shape <code>|M|</code> representing P(M)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the accuracy of the lexicon I[W:U]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_distortion": {"fullname": "ultk.effcomm.information.ib_distortion", "modulename": "ultk.effcomm.information", "qualname": "ib_distortion", "kind": "function", "doc": "<p>Return the IB distortion measure E[DKL[ M || M_hat ]]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoder:</strong>  array of shape <code>(|M|, |W|)</code> representing P(W | M)</li>\n<li><strong>decoder:</strong>  array of shape <code>(|W|, |M|)</code> representing P(M | W)</li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|M|, |U|)</code> representing P(U | M)</li>\n<li><strong>prior:</strong>  array of shape <code>|M|</code> representing P(M)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the distortion E[DKL[ M || M_hat ]] = I[M:U] - I[W:U]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_encoder_to_point": {"fullname": "ultk.effcomm.information.ib_encoder_to_point", "modulename": "ultk.effcomm.information", "qualname": "ib_encoder_to_point", "kind": "function", "doc": "<p>Return (complexity, accuracy, comm_cost) IB coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code> representing the distribution over world states given meanings.</li>\n<li><strong>prior:</strong>  array of shape <code>|M|</code> representing the cognitive source</li>\n<li><strong>encoder:</strong>  array of shape <code>(|M|, |W|)</code> representing P(W | M)</li>\n<li><strong>decoder:</strong>  array of shape <code>(|W|, |M|)</code> representing P(M | W).  By default is None, and the Bayesian optimal decoder will be inferred.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">decoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.information.ib_optimal_decoder": {"fullname": "ultk.effcomm.information.ib_optimal_decoder", "modulename": "ultk.effcomm.information", "qualname": "ib_optimal_decoder", "kind": "function", "doc": "<p>Compute the bayesian optimal decoder. See <a href=\"https://github.com/nogazs/ib-color-naming/blob/master/src/ib_naming_model.py#L40\">https://github.com/nogazs/ib-color-naming/blob/master/src/ib_naming_model.py#L40</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoder:</strong>  array of shape <code>(|words|, |meanings|)</code></li>\n<li><strong>prior:</strong>  array of shape <code>(|meanings|,)</code></li>\n<li><strong>meaning_dists:</strong>  array of shape <code>(|meanings|, |meanings|)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>array of shape <code>(|words|, |meanings|)</code> representing the 'optimal' deterministic decoder</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">meaning_dists</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.informativity": {"fullname": "ultk.effcomm.informativity", "modulename": "ultk.effcomm.informativity", "kind": "module", "doc": "<p>Functions for measuring informativity in efficient communication analyses of languages.</p>\n"}, "ultk.effcomm.informativity.indicator_utility": {"fullname": "ultk.effcomm.informativity.indicator_utility", "modulename": "ultk.effcomm.informativity", "qualname": "indicator_utility", "kind": "function", "doc": "<p>Indicator utility function, i.e. delta.  Returns 1.0 iff ref1 equals ref2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref1</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span>,</span><span class=\"param\">\t<span class=\"n\">ref2</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.informativity.informativity": {"fullname": "ultk.effcomm.informativity.informativity", "modulename": "ultk.effcomm.informativity", "qualname": "informativity", "kind": "function", "doc": "<p>The informativity of a language is identified with the successful communication between a speaker and a listener.</p>\n\n<p>This function is a wrapper for <code>communicative_success</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the language to compute informativity of.</li>\n<li><strong>prior:</strong>  a probability distribution representing communicative need (frequency) for Referents.</li>\n<li><strong>utility:</strong>  a function representing the usefulness of listener guesses about speaker Referents, e.g. Referent similarity. To reward only exact recovery of meanings, use the indicator function (default).</li>\n<li><strong>kind:</strong>  {\"literal, pragmatic\"} Whether to measure informativity using literal or pragmatic agents, as canonically described in the Rational Speech Act framework. The default is \"literal\".</li>\n</ul>\n\n<p><em>Concepts</em>:\n    The speaker can be thought of as a conditional distribution over expressions given meanings. The listener is likewise a conditional distribution over meanings given expressions. The communicative need, or cognitive source, is a prior probability over meanings representing how frequently agents need to use certain meanings in communication. The utility function represents the similarity, or appropriateness, of the listener's guess m' about the speaker's intended meaning m.</p>\n\n<p><em>Formula</em>:\n    The informativity of a language $L$ with meaning space $M$ is defined:</p>\n\n<p>$I(L) := \\sum_{m \\in M} p(m) \\sum_{i \\in L} p(i|m) \\sum_{\\hat{m} \\in i} p(\\hat{m}|i) \\cdot u(m, \\hat{m})$</p>\n\n<p><em>Bounds</em>:\n    A perfectly informative (=1.0) language can be constructed with a exactly one expression for each meaning.</p>\n\n<pre><code>For u() = indicator(), every language has nonzero informativity because a language must contain at least one expression, and an expression must contain at least one meaning.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">utility</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">,</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">indicator_utility</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;literal&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.informativity.communicative_success": {"fullname": "ultk.effcomm.informativity.communicative_success", "modulename": "ultk.effcomm.informativity", "qualname": "communicative_success", "kind": "function", "doc": "<p>Helper function to compute the literal informativity of a language.</p>\n\n<p>$I(L) = \\sum_{m, \\hat{m}} P(m, \\hat{m}) \\cdot u(m, \\hat{m})$</p>\n\n<p>$ = \\sum_{m \\in M} p(m) \\sum_{i \\in L} p(i|m) \\sum_{\\hat{m} \\in i} p(\\hat{m} |i) \\cdot u(m, m')$</p>\n\n<p>$ = \\sum \\text{diag}(p)SR \\odot U $</p>\n\n<p>For more details, see <a href=\"https://github.com/CLMBRs/altk/blob/main/docs/vectorized_informativity.pdf\">docs/vectorized_informativity</a>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>speaker:</strong>  a literal or pragmatic speaker, containing a matrix S for P(e | m)</li>\n<li><strong>listener:</strong>  a literal or pragmatic listener, containing a matrix R for P(m | e)</li>\n<li><strong>prior:</strong>  p(m), distribution over meanings representing communicative need</li>\n<li><strong>utility:</strong>  a function u(m, m') representing similarity of meanings, or pair-wise usefulness of listener guesses about speaker meanings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">speaker</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Speaker</span>,</span><span class=\"param\">\t<span class=\"n\">listener</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Listener</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">utility</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">,</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization": {"fullname": "ultk.effcomm.optimization", "modulename": "ultk.effcomm.optimization", "kind": "module", "doc": "<p>Classes and functions for generating languages that optimize the simplicity/informativeness trade-off, e.g. via an iterative evolutionary algorithm.</p>\n"}, "ultk.effcomm.optimization.Mutation": {"fullname": "ultk.effcomm.optimization.Mutation", "modulename": "ultk.effcomm.optimization", "qualname": "Mutation", "kind": "class", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.Mutation.precondition": {"fullname": "ultk.effcomm.optimization.Mutation.precondition", "modulename": "ultk.effcomm.optimization", "qualname": "Mutation.precondition", "kind": "function", "doc": "<p>Whether a mutation is allowed to apply to a language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.Mutation.mutate": {"fullname": "ultk.effcomm.optimization.Mutation.mutate", "modulename": "ultk.effcomm.optimization", "qualname": "Mutation.mutate", "kind": "function", "doc": "<p>Mutate the language, possibly using a list of expressions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.RemoveExpression": {"fullname": "ultk.effcomm.optimization.RemoveExpression", "modulename": "ultk.effcomm.optimization", "qualname": "RemoveExpression", "kind": "class", "doc": "<p></p>\n", "bases": "Mutation"}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"fullname": "ultk.effcomm.optimization.RemoveExpression.precondition", "modulename": "ultk.effcomm.optimization", "qualname": "RemoveExpression.precondition", "kind": "function", "doc": "<p>Whether a mutation is allowed to apply to a language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"fullname": "ultk.effcomm.optimization.RemoveExpression.mutate", "modulename": "ultk.effcomm.optimization", "qualname": "RemoveExpression.mutate", "kind": "function", "doc": "<p>Mutate the language, possibly using a list of expressions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.AddExpression": {"fullname": "ultk.effcomm.optimization.AddExpression", "modulename": "ultk.effcomm.optimization", "qualname": "AddExpression", "kind": "class", "doc": "<p></p>\n", "bases": "Mutation"}, "ultk.effcomm.optimization.AddExpression.precondition": {"fullname": "ultk.effcomm.optimization.AddExpression.precondition", "modulename": "ultk.effcomm.optimization", "qualname": "AddExpression.precondition", "kind": "function", "doc": "<p>Whether a mutation is allowed to apply to a language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.AddExpression.mutate": {"fullname": "ultk.effcomm.optimization.AddExpression.mutate", "modulename": "ultk.effcomm.optimization", "qualname": "AddExpression.mutate", "kind": "function", "doc": "<p>Mutate the language, possibly using a list of expressions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer", "kind": "class", "doc": "<p>Class for approximating the Pareto frontier of languages optimizing the simplicity/informativity trade-off.</p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.__init__", "kind": "function", "doc": "<p>Initialize the evolutionary algorithm configurations.</p>\n\n<p>The measures of complexity and informativity, the expressions, and the mutations are all specific to the particular semantic domain.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>objectives:</strong>  a dict of the two objectives to optimize for, e.g. simplicity and informativeness, of the form, e.g.\n{\n    \"complexity\": comp_measure,\n    \"comm_cost\": lambda l: 1 - inf_measure(l)\n}</li>\n<li><strong>expressions:</strong>     a list of expressions from which to apply mutations to languages.</li>\n<li><strong>sample_size:</strong>   the size of the population at every generation.</li>\n<li><strong>max_muatations:</strong>    between 1 and this number of mutations will be applied to a subset of the population at the end of each generation.</li>\n<li><strong>generations:</strong>   how many iterations to run the evolutionary algorithm for.</li>\n<li><strong>lang_size:</strong>     between 1 and this number of expressions comprise a language.</li>\n<li><strong>mutations:</strong>  (optional) a list of Mutation objects, defaults to add/remove expression</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">objectives</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_mutations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">generations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">lang_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tmutations: list[ultk.effcomm.optimization.Mutation] = [&lt;class &#x27;ultk.effcomm.optimization.AddExpression&#x27;&gt;, &lt;class &#x27;ultk.effcomm.optimization.RemoveExpression&#x27;&gt;]</span>)</span>"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.objectives", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.expressions", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.mutations", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.sample_size", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.max_mutations", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.generations", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.generations", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.lang_size", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.dominating_languages", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.explored_languages", "kind": "variable", "doc": "<p></p>\n"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.fit", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.fit", "kind": "function", "doc": "<p>Computes the Pareto frontier, a set languages which cannot be both more simple and more informative.</p>\n\n<p>Uses pygmo's nondominated_front method for computing a population's best solutions to a multi-objective optimization problem.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed_population:</strong>  a list of languages representing the population at generation 0 of the algorithm.</li>\n<li><strong>explore:</strong>  a float in [0,1] representing how much to optimize for fitness\n(optimality wrt pareto front of complexity and comm_cost), and how much to randomly explore.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict of the estimated optimization solutions, as well as points explored along the way; of the form</p>\n\n<pre><code>{\n\"dominating_languages\": list of languages as estimated solutions,\n\"explored_languages\": list of all the languages explored during the evolutionary algorithm,\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">seed_population</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">explore</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.sample_mutated", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>languages:</strong>  dominating languages of a generation</li>\n<li><strong>amount:</strong>  sample_size.</li>\n<li><strong>expressions:</strong>  the list of expressions</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list of updated languages</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"fullname": "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate", "modulename": "ultk.effcomm.optimization", "qualname": "EvolutionaryOptimizer.mutate", "kind": "function", "doc": "<p>Randomly selects a mutation that is allowed to apply and applies it to a language.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the Language to mutate</li>\n<li><strong>expressions:</strong>  the list of all possible expressions.\nSome mutations need access to this list, so it is part of the mutation api.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the mutated Language</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.optimization.sample_parents": {"fullname": "ultk.effcomm.optimization.sample_parents", "modulename": "ultk.effcomm.optimization", "qualname": "sample_parents", "kind": "function", "doc": "<p>Use the explore parameter to explore possibly suboptimal areas of the language space.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dominating_languages:</strong>  a list of the languages with current best fitness with respect to the objectives.</li>\n<li><strong>explored_languages:</strong>  a list of all languages encountered during the evolutionary algorithm.</li>\n<li><strong>explore:</strong>  a float in <code>[0,1]</code> specifying how much to explore possibly suboptimal languages.\nIf set to 0, <code>parent_languages</code> is just <code>dominating_languages</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the languages to serve as the next generation (after possible mutations)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dominating_languages</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">explored_languages</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">explore</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.sampling": {"fullname": "ultk.effcomm.sampling", "modulename": "ultk.effcomm.sampling", "kind": "module", "doc": "<p>Functions for sampling expressions into languages.</p>\n"}, "ultk.effcomm.sampling.get_hypothetical_variants": {"fullname": "ultk.effcomm.sampling.get_hypothetical_variants", "modulename": "ultk.effcomm.sampling", "qualname": "get_hypothetical_variants", "kind": "function", "doc": "<p>For each system (parameterized by a language or else a speaker), generate <code>num</code> hypothetical variants by permuting the signals that the system assigns to states.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>languages:</strong>  a list of languages to permute, by constructing LiteralSpeakers and permuting their weights.</li>\n<li><strong>speakers:</strong>  a list of speakers of a language, whose weights can be directly permuted. Should be used instead of <code>languages</code> if possible, because it can be more finegrained (every language can be associated with multiple speakers).</li>\n<li><strong>total:</strong>  the total number of hypothetical variants to obtain</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>hypothetical_variants: a list of type either Language or np.ndarray depending on whether <code>languages</code> or <code>speakers</code> was passed, representing hypothetical variants of the systems passed. If <code>speakers</code> was passed, a list of speakers is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">speakers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">Speaker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff": {"fullname": "ultk.effcomm.tradeoff", "modulename": "ultk.effcomm.tradeoff", "kind": "module", "doc": "<p>Functions for constructing an efficient communication analysis by measuring the simplicity/informativeness trade-off languages and formatting results as a dataframe or a plot.</p>\n"}, "ultk.effcomm.tradeoff.dominates": {"fullname": "ultk.effcomm.tradeoff.dominates", "modulename": "ultk.effcomm.tradeoff", "qualname": "dominates", "kind": "function", "doc": "<p>Determine whether p1 dominates p2,\ni.e. whether for every i p1[i] &lt;= p2[i]\nand for some i p1[i] &lt; p2[i].</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>p1:</strong>  a point</li>\n<li><strong>p2:</strong>  another point</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>whether or not p1 dominates p2</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">p2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff.non_dominated_2d": {"fullname": "ultk.effcomm.tradeoff.non_dominated_2d", "modulename": "ultk.effcomm.tradeoff", "qualname": "non_dominated_2d", "kind": "function", "doc": "<p>Return the non-dominated (Pareto) front of a list of 2-D points, using Kung's algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong>  A list of 2-D points</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a list, the indices of <code>points</code> for which no other point is as good on all dimensions\n  and better on at least one</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"fullname": "ultk.effcomm.tradeoff.pareto_optimal_languages", "modulename": "ultk.effcomm.tradeoff", "qualname": "pareto_optimal_languages", "kind": "function", "doc": "<p>Use non_dominated_2d to compute the Pareto languages.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">objectives</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff.pareto_min_distances": {"fullname": "ultk.effcomm.tradeoff.pareto_min_distances", "modulename": "ultk.effcomm.tradeoff", "qualname": "pareto_min_distances", "kind": "function", "doc": "<p>Measure the Pareto optimality of each language by measuring its Euclidean closeness to the frontier. The frontier is a line (list of points) interpolated from the pareto points.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong>  the list of all language (x, y) pairs, where x and y are usually communicative cost and complexity.</li>\n<li><strong>pareto_points:</strong>  the list of all dominant language (x, y) pairs to constitute the Pareto frontier. The points should have been measured by pygmo's non_dominated_front_2d function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>min_distances: an array of shape <code>len(points)</code> Euclidean distances for each language to the closest point on the Pareto frontier.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">pareto_points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff.interpolate_data": {"fullname": "ultk.effcomm.tradeoff.interpolate_data", "modulename": "ultk.effcomm.tradeoff", "qualname": "interpolate_data", "kind": "function", "doc": "<p>Interpolate the points yielded by the pareto optimal languages into a continuous (though not necessarily smooth) curve.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>points:</strong>  an list of (comm_cost, complexity) pairs of size [dominating_languages], a possibly non-smooth set of solutions to the trade-off.</li>\n<li><strong>min_cost:</strong>  the minimum communicative cost value possible to interpolate from.</li>\n<li><strong>max_cost:</strong>  the maximum communicative cost value possible to interpolate from. A natural assumption is to let complexity=0.0 if max_cost=1.0, which will result in a Pareto curve that spans the entire 2d space, and consequently the plot with x and y limits both ranging [0.0, 1.0].</li>\n<li><strong>num:</strong>  the number of x-axis points (cost) to interpolate. Controls smoothness of curve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>interpolated_points: an array of size <code>(num, num)</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">min_cost</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">max_cost</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.tradeoff.tradeoff": {"fullname": "ultk.effcomm.tradeoff.tradeoff", "modulename": "ultk.effcomm.tradeoff", "qualname": "tradeoff", "kind": "function", "doc": "<p>Builds a final efficient communication analysis by measuring a list of languages, updating their internal data, and returning the results.</p>\n\n<p>This function measures possibly many graded or categorical properties of each language, but minimally the properties of commmunicative cost and complexity. These two measures fully define the results of an efficiency analysis, in the sense they define the optimal solutions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>languages:</strong>  A list representing the pool of all languages to be measured for an efficient communication analysis.</li>\n<li><strong>x:</strong>  the first pressure to measure, e.g. communicative cost.</li>\n<li><strong>y:</strong>  the second pressure to measure, e.g. cognitive complexity.</li>\n<li><strong>frontier:</strong>  a list of (comm_cost, complexity) points representing a Pareto frontier to measure optimality w.r.t.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dictionary of the population and the pareto front, of the form</p>\n\n<pre><code>{\n    \"languages\": the list of languages, with their internal efficient communication data updated,\n\n    \"dominating_languages\": the list of the languages dominating the population w.r.t. comm_cost and complexity. If no `frontier` is none, this can be considered the Pareto frontier.\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;comm_cost&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;complexity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">frontier</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.util": {"fullname": "ultk.effcomm.util", "modulename": "ultk.effcomm.util", "kind": "module", "doc": "<p>Various helper functions for computing complexity and informativity.</p>\n"}, "ultk.effcomm.util.rows_zero_to_uniform": {"fullname": "ultk.effcomm.util.rows_zero_to_uniform", "modulename": "ultk.effcomm.util", "qualname": "rows_zero_to_uniform", "kind": "function", "doc": "<p>Ensure that <code>mat</code> encodes a probability distribution, i.e. each row (indexed by a meaning) is a distribution over expressions: sums to exactly 1.0.</p>\n\n<p>This is necessary when exploring mathematically possible languages (including natural languages, like Hausa in the case of modals) which sometimes have that a row of the matrix p(word|meaning) is a vector of 0s.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mat:</strong>  a 2D numpy array that should be normalized so that each row is a probability distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.util.build_utility_matrix": {"fullname": "ultk.effcomm.util.build_utility_matrix", "modulename": "ultk.effcomm.util", "qualname": "build_utility_matrix", "kind": "function", "doc": "<p>Construct the square matrix specifying the utility function defined for pairs of meanings, used for computing communicative success.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">universe</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Universe</span>,</span><span class=\"param\">\t<span class=\"n\">utility</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">,</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.effcomm.util.PRECISION": {"fullname": "ultk.effcomm.util.PRECISION", "modulename": "ultk.effcomm.util", "qualname": "PRECISION", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-16"}, "ultk.effcomm.util.marginal": {"fullname": "ultk.effcomm.util.marginal", "modulename": "ultk.effcomm.util", "qualname": "marginal", "kind": "function", "doc": "<p>Compute $p(x) = \\sum_x p(x,y)$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pXY:</strong>  a numpy array of shape <code>(|X|, |Y|)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pY: (axis = 0) or pX (default, axis = 1)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pXY</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.conditional": {"fullname": "ultk.effcomm.util.conditional", "modulename": "ultk.effcomm.util", "qualname": "conditional", "kind": "function", "doc": "<p>Compute $p(y|x) = \\frac{p(x,y)}{p(x)}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pXY:</strong>  a numpy array of shape <code>(|X|, |Y|)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pY_X: a numpy array of shape <code>(|X|, |Y|)</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pXY</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.joint": {"fullname": "ultk.effcomm.util.joint", "modulename": "ultk.effcomm.util", "qualname": "joint", "kind": "function", "doc": "<p>Compute $p(x,y) = p(y|x) \\cdot p(x) $</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pY_X:</strong>  a numpy array of shape <code>(|X|, |Y|)</code></li>\n<li><strong>pX:</strong>  a numpy array <code>|X|</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pXY: a numpy array of the shape <code>(|X|, |Y|)</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pY_X</span>, </span><span class=\"param\"><span class=\"n\">pX</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.marginalize": {"fullname": "ultk.effcomm.util.marginalize", "modulename": "ultk.effcomm.util", "qualname": "marginalize", "kind": "function", "doc": "<p>Compute $p(y) = \\sum_x p(y|x) \\cdot p(x)$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pY_X:</strong>  a numpy array of shape <code>(|X|, |Y|)</code></li>\n<li><strong>pX:</strong>  a numpy array of shape <code>|X|</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pY: a numpy array of shape <code>|Y|</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pY_X</span>, </span><span class=\"param\"><span class=\"n\">pX</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.bayes": {"fullname": "ultk.effcomm.util.bayes", "modulename": "ultk.effcomm.util", "qualname": "bayes", "kind": "function", "doc": "<p>Compute $p(x|y) = \\frac{p(y|x) \\cdot p(x)}{p(y)}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pY_X:</strong>  a numpy array of shape <code>(|X|, |Y|)</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pY_X</span>, </span><span class=\"param\"><span class=\"n\">pX</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.xlogx": {"fullname": "ultk.effcomm.util.xlogx", "modulename": "ultk.effcomm.util", "qualname": "xlogx", "kind": "function", "doc": "<p>Compute $x \\log p(x)$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.H": {"fullname": "ultk.effcomm.util.H", "modulename": "ultk.effcomm.util", "qualname": "H", "kind": "function", "doc": "<p>Compute the entropy of p, $H(X) = - \\sum_x x \\log p(x)$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.MI": {"fullname": "ultk.effcomm.util.MI", "modulename": "ultk.effcomm.util", "qualname": "MI", "kind": "function", "doc": "<p>Compute mutual information, $I[X:Y]$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pXY</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.DKL": {"fullname": "ultk.effcomm.util.DKL", "modulename": "ultk.effcomm.util", "qualname": "DKL", "kind": "function", "doc": "<p>Compute KL divergences, $D_{KL}[p~||~q]$</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.effcomm.util.gNID": {"fullname": "ultk.effcomm.util.gNID", "modulename": "ultk.effcomm.util", "qualname": "gNID", "kind": "function", "doc": "<p>Compute Generalized Normalized Informational Distance between two encoders.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pW_X:</strong>  first encoder of shape <code>(|meanings|, |words|)</code></li>\n<li><strong>pV_X:</strong>  second encoder of shape <code>(|meanings|, |words|)</code></li>\n<li><strong>pX:</strong>  prior over source variables of shape <code>(|meanings|,)</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pW_X</span>, </span><span class=\"param\"><span class=\"n\">pV_X</span>, </span><span class=\"param\"><span class=\"n\">pX</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language": {"fullname": "ultk.language", "modulename": "ultk.language", "kind": "module", "doc": "<p>Classes for modeling (natural or hypothetical) languagese.</p>\n\n<p>At the current stage of development, ULTK focuses on supporting abstractions to model the mapping between expressions and meanings of a language. So far, we leave almost everything besides this basic mapping (morphosyntax, phonology, phonetic inventories, among other features of human languages) to future work.</p>\n\n<p>The <code>ultk.language.language</code> submodule contains classes for constructing a language, which can contain one or more expressions. </p>\n\n<p>The <code>ultk.language.semantics</code> submodule contains classes for defining a universe (meaning space) of referents (denotations) and meanings (categories).</p>\n"}, "ultk.language.grammar": {"fullname": "ultk.language.grammar", "modulename": "ultk.language.grammar", "kind": "module", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule": {"fullname": "ultk.language.grammar.Rule", "modulename": "ultk.language.grammar", "qualname": "Rule", "kind": "class", "doc": "<p>Basic class for a grammar rule.  Grammar rules in ULTK correspond\nto functions.  One can think of a grammar as generating complex functions from\nmore basic ones.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>lhs:</strong>  left-hand side of the rule (can be anything)\nconceptually, the output type of a function</li>\n<li><strong>rhs:</strong>  right-hand side; assumed to be an iterable\nconceptually, a list of types of inputs</li>\n<li><strong>func:</strong>  a callable, the function to be computed when a node with this rule is executed</li>\n<li><strong>name:</strong>  name of the function</li>\n<li><strong>weight:</strong>  a relative weight to assign to this rule\nwhen added to a grammar, all rules with the same LHS will be weighted together</li>\n</ul>\n"}, "ultk.language.grammar.Rule.__init__": {"fullname": "ultk.language.grammar.Rule.__init__", "modulename": "ultk.language.grammar", "qualname": "Rule.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Rule</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span>)</span>"}, "ultk.language.grammar.Rule.lhs": {"fullname": "ultk.language.grammar.Rule.lhs", "modulename": "ultk.language.grammar", "qualname": "Rule.lhs", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule.rhs": {"fullname": "ultk.language.grammar.Rule.rhs", "modulename": "ultk.language.grammar", "qualname": "Rule.rhs", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule.func": {"fullname": "ultk.language.grammar.Rule.func", "modulename": "ultk.language.grammar", "qualname": "Rule.func", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule.name": {"fullname": "ultk.language.grammar.Rule.name", "modulename": "ultk.language.grammar", "qualname": "Rule.name", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule.weight": {"fullname": "ultk.language.grammar.Rule.weight", "modulename": "ultk.language.grammar", "qualname": "Rule.weight", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.Rule.is_terminal": {"fullname": "ultk.language.grammar.Rule.is_terminal", "modulename": "ultk.language.grammar", "qualname": "Rule.is_terminal", "kind": "function", "doc": "<p>Whether this is a terminal rule.  In our framework, this means that RHS is empty,\ni.e. there are no arguments to the function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.GrammaticalExpression": {"fullname": "ultk.language.grammar.GrammaticalExpression", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression", "kind": "class", "doc": "<p>A GrammaticalExpression has been built up from a Grammar by applying a sequence of Rules.\nCrucially, it is _callable_, using the functions corresponding to each rule.</p>\n\n<p>A GrammaticalExpression, when called, takes in a Referent.  Because of this, a Meaning can\nbe generated by specifying a Universe (which contains Referents).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name:</strong>  name of the top-most function</li>\n<li><strong>func:</strong>  the function</li>\n<li><strong>children:</strong>  child expressions (possibly empty)</li>\n</ul>\n", "bases": "ultk.language.language.Expression"}, "ultk.language.grammar.GrammaticalExpression.__init__": {"fullname": "ultk.language.grammar.GrammaticalExpression.__init__", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rule_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">children</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meaning</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"fullname": "ultk.language.grammar.GrammaticalExpression.rule_name", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.rule_name", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.GrammaticalExpression.func": {"fullname": "ultk.language.grammar.GrammaticalExpression.func", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.func", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.GrammaticalExpression.children": {"fullname": "ultk.language.grammar.GrammaticalExpression.children", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.children", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"fullname": "ultk.language.grammar.GrammaticalExpression.yield_string", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.yield_string", "kind": "function", "doc": "<p>Get the 'yield' string of this term, i.e. the concatenation\nof the leaf nodes.</p>\n\n<p>This is useful for thinking of a <code>Grammar</code> as generating derivation trees for\nan underlying CFG.  This method will then generate the strings generated by\nthe corresponding CFG.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"fullname": "ultk.language.grammar.GrammaticalExpression.evaluate", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.evaluate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Universe</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.GrammaticalExpression.add_child": {"fullname": "ultk.language.grammar.GrammaticalExpression.add_child", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.add_child", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">child</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"fullname": "ultk.language.grammar.GrammaticalExpression.to_dict", "modulename": "ultk.language.grammar", "qualname": "GrammaticalExpression.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.UniquenessArgs": {"fullname": "ultk.language.grammar.UniquenessArgs", "modulename": "ultk.language.grammar", "qualname": "UniquenessArgs", "kind": "class", "doc": "<p>Arguments for specifying uniqueness of GrammaticalExpressions in a Grammar.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>unique_expressions:</strong>  a dictionary in which to store unique Expressions</li>\n<li><strong>key:</strong>  a function used to evaluate uniqueness</li>\n<li><strong>compare_func:</strong>  a comparison function, used to decide which Expression to add to the dict\nnew Expressions will be added as values to <code>unique_dict</code> only if they are minimal\namong those sharing the same key (by <code>unique_key</code>) according to this func</li>\n</ul>\n", "bases": "typing.TypedDict"}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"fullname": "ultk.language.grammar.UniquenessArgs.unique_expressions", "modulename": "ultk.language.grammar", "qualname": "UniquenessArgs.unique_expressions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[typing.Any, dict[typing.Any, ultk.language.grammar.GrammaticalExpression]]"}, "ultk.language.grammar.UniquenessArgs.key": {"fullname": "ultk.language.grammar.UniquenessArgs.key", "modulename": "ultk.language.grammar", "qualname": "UniquenessArgs.key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[ultk.language.grammar.GrammaticalExpression], Any]"}, "ultk.language.grammar.UniquenessArgs.compare_func": {"fullname": "ultk.language.grammar.UniquenessArgs.compare_func", "modulename": "ultk.language.grammar", "qualname": "UniquenessArgs.compare_func", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[ultk.language.grammar.GrammaticalExpression, ultk.language.grammar.GrammaticalExpression], bool]"}, "ultk.language.grammar.Grammar": {"fullname": "ultk.language.grammar.Grammar", "modulename": "ultk.language.grammar", "qualname": "Grammar", "kind": "class", "doc": "<p>At its core, a Grammar is a set of Rules with methods for generating GrammaticalExpressions.</p>\n"}, "ultk.language.grammar.Grammar.__init__": {"fullname": "ultk.language.grammar.Grammar.__init__", "modulename": "ultk.language.grammar", "qualname": "Grammar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, "ultk.language.grammar.Grammar.add_rule": {"fullname": "ultk.language.grammar.Grammar.add_rule", "modulename": "ultk.language.grammar", "qualname": "Grammar.add_rule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">Rule</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.parse": {"fullname": "ultk.language.grammar.Grammar.parse", "modulename": "ultk.language.grammar", "qualname": "Grammar.parse", "kind": "function", "doc": "<p>Parse a string representation of an expression of a grammar.\nNote that this is not a general-purpose parsing algorithm.  We assume that the strings are of the form\n    parent_name(child1_name, ..., childn_name)\nwhere parent_name is the name of a rule of this grammar that has a length-n RHS, and that\nchildi_name is the name of a rule for each child i.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expression:</strong>  string in the above format</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>the corresponding GrammaticalExpression</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">opener</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">closer</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.generate": {"fullname": "ultk.language.grammar.Grammar.generate", "modulename": "ultk.language.grammar", "qualname": "Grammar.generate", "kind": "function", "doc": "<p>Generate an expression from a given lhs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.enumerate": {"fullname": "ultk.language.grammar.Grammar.enumerate", "modulename": "ultk.language.grammar", "qualname": "Grammar.enumerate", "kind": "function", "doc": "<p>Enumerate all expressions from the grammar up to a given depth from a given LHS.\nThis method also can update a specified dictionary to store only _unique_ expressions, with\na user-specified criterion of uniqueness.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>depth:</strong>  how deep the trees should be</li>\n<li><strong>lhs:</strong>  left hand side to start from; defaults to the grammar's start symbol</li>\n<li><strong>uniqueness_args:</strong>  a dictionary specifying the parameters for uniqueness:\nunique_dict: a dictionary in which to store unique Expressions\nkey: a function used to evaluate uniqueness\ncompare_func: a comparison function, used to decide which Expression to add to the dict\n    new Expressions will be added as values to <code>unique_dict</code> only if they are _minimal_\n    among those sharing the same key (by <code>unique_key</code>) according to this func</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>all GrammaticalExpressions up to depth</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">uniqueness_args</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">UniquenessArgs</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"fullname": "ultk.language.grammar.Grammar.enumerate_at_depth", "modulename": "ultk.language.grammar", "qualname": "Grammar.enumerate_at_depth", "kind": "function", "doc": "<p>Enumerate GrammaticalExpressions for this Grammar _at_ a fixed depth.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">uniqueness_args</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">UniquenessArgs</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.get_unique_expressions": {"fullname": "ultk.language.grammar.Grammar.get_unique_expressions", "modulename": "ultk.language.grammar", "qualname": "Grammar.get_unique_expressions", "kind": "function", "doc": "<p>Get all unique GrammaticalExpressions, up to a certain depth, with a user-specified criterion\nof uniqueness, and a specified comparison function for determining which Expression to save when there's a clash.\nThis can be used, for instance, to measure the minimum description length of some\nMeanings, by using expression.evaluate(), which produces a Meaning for an Expression, as the\nkey for determining uniqueness, and length of the expression as comparison.</p>\n\n<p>This is a wrapper around <code>enumerate</code>, but which produces the dictionary of key->Expression entries\nand returns it.  (<code>enumerate</code> is a generator with side effects).</p>\n\n<p>For Args, see the docstring for <code>enumerate</code>.</p>\n\n<p>Note: if you additionally want to store _all_ expressions, and not just the unique ones, you should\ndirectly use <code>enumerate</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dictionary of {key: GrammaticalExpression}, where the keys are generated by <code>unique_key</code>\n  The GrammticalExpression which is the value will be the one that is minimum among\n  <code>compare_func</code> amongst all Expressions up to <code>depth</code> which share the same key</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">unique_key</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">compare_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">,</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">inf</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">GrammaticalExpression</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.get_all_rules": {"fullname": "ultk.language.grammar.Grammar.get_all_rules", "modulename": "ultk.language.grammar", "qualname": "Grammar.get_all_rules", "kind": "function", "doc": "<p>Get all rules as a list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">grammar</span><span class=\"o\">.</span><span class=\"n\">Rule</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.grammar.Grammar.from_yaml": {"fullname": "ultk.language.grammar.Grammar.from_yaml", "modulename": "ultk.language.grammar", "qualname": "Grammar.from_yaml", "kind": "function", "doc": "<p>Read a grammar specified in a simple YAML format.</p>\n\n<p>Expected format:</p>\n\n<pre><code>start: bool\nrules:\n- lhs: bool\n  rhs:\n  - bool\n  - bool\n  name: \"and\"\n  function: \"lambda p1, p2 : p1 and p2\"\n- lhs: bool\n  rhs:\n  - bool\n  - bool\n  name: \"or\"\n  function: \"lambda p1, p2 : p1 or p2\"\n</code></pre>\n\n<p>Note that for each fule, the value for <code>function</code> will be passed to\n<code>eval</code>, so be careful!</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename:</strong>  file containing a grammar in the above format</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.language": {"fullname": "ultk.language.language", "modulename": "ultk.language.language", "kind": "module", "doc": "<p>Classes for modeling languages as form-meaning mappings, most important among them the Language and Expression classes.</p>\n\n<h6 id=\"example-usage\">Example usage:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ultk.language.language</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Language</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># assuming the meaning `a_few_meaning` has already been constructed</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># define the expression</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a_few</span> <span class=\"o\">=</span> <span class=\"n\">NumeralExpression</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"s2\">&quot;a few&quot;</span><span class=\"p\">,</span> <span class=\"n\">meaning</span><span class=\"o\">=</span><span class=\"n\">a_few_meaning</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># define a very small language</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lang_1</span> <span class=\"o\">=</span> <span class=\"n\">Language</span><span class=\"p\">([</span><span class=\"n\">a_few</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or a slightly larger one with synonymy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lang_2</span> <span class=\"o\">=</span> <span class=\"n\">Language</span><span class=\"p\">([</span><span class=\"n\">a_few</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, "ultk.language.language.Expression": {"fullname": "ultk.language.language.Expression", "modulename": "ultk.language.language", "qualname": "Expression", "kind": "class", "doc": "<p>Minimally contains a form and a meaning.</p>\n"}, "ultk.language.language.Expression.__init__": {"fullname": "ultk.language.language.Expression.__init__", "modulename": "ultk.language.language", "qualname": "Expression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meaning</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "ultk.language.language.Expression.form": {"fullname": "ultk.language.language.Expression.form", "modulename": "ultk.language.language", "qualname": "Expression.form", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.language.Expression.meaning": {"fullname": "ultk.language.language.Expression.meaning", "modulename": "ultk.language.language", "qualname": "Expression.meaning", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.language.Expression.can_express": {"fullname": "ultk.language.language.Expression.can_express", "modulename": "ultk.language.language", "qualname": "Expression.can_express", "kind": "function", "doc": "<p>Return True if the expression can express the input single meaning point and false otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">referent</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Expression.to_dict": {"fullname": "ultk.language.language.Expression.to_dict", "modulename": "ultk.language.language", "qualname": "Expression.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Language": {"fullname": "ultk.language.language.Language", "modulename": "ultk.language.language", "qualname": "Language", "kind": "class", "doc": "<p>Minimally contains Expression objects.</p>\n"}, "ultk.language.language.Language.__init__": {"fullname": "ultk.language.language.Language.__init__", "modulename": "ultk.language.language", "qualname": "Language.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.language.language.Language.expressions": {"fullname": "ultk.language.language.Language.expressions", "modulename": "ultk.language.language", "qualname": "Language.expressions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[ultk.language.language.Expression, ...]"}, "ultk.language.language.Language.universe": {"fullname": "ultk.language.language.Language.universe", "modulename": "ultk.language.language", "qualname": "Language.universe", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ultk.language.semantics.Universe"}, "ultk.language.language.Language.add_expression": {"fullname": "ultk.language.language.Language.add_expression", "modulename": "ultk.language.language", "qualname": "Language.add_expression", "kind": "function", "doc": "<p>Add an expression to the list of expressions in a language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.language.Language.pop": {"fullname": "ultk.language.language.Language.pop", "modulename": "ultk.language.language", "qualname": "Language.pop", "kind": "function", "doc": "<p>Removes an expression at the specified index of the list of expressions, and returns it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Language.is_natural": {"fullname": "ultk.language.language.Language.is_natural", "modulename": "ultk.language.language", "qualname": "Language.is_natural", "kind": "function", "doc": "<p>Whether a language represents a human natural language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Language.degree_property": {"fullname": "ultk.language.language.Language.degree_property", "modulename": "ultk.language.language", "qualname": "Language.degree_property", "kind": "function", "doc": "<p>Count what percentage of expressions in a language have a given property.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">property</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Language.binary_matrix": {"fullname": "ultk.language.language.Language.binary_matrix", "modulename": "ultk.language.language", "qualname": "Language.binary_matrix", "kind": "function", "doc": "<p>Get a binary matrix of shape <code>(num_meanings, num_expressions)</code>\nspecifying which expressions can express which meanings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.Language.to_dict": {"fullname": "ultk.language.language.Language.to_dict", "modulename": "ultk.language.language", "qualname": "Language.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "ultk.language.language.aggregate_expression_complexity": {"fullname": "ultk.language.language.aggregate_expression_complexity", "modulename": "ultk.language.language", "qualname": "aggregate_expression_complexity", "kind": "function", "doc": "<p>Aggregate complexities for individual <code>Expression</code>s into a complexity for a <code>Language</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  the Language to measure</li>\n<li><strong>expression_complexity_func:</strong>  the function that returns the complexity of an individual expression</li>\n<li><strong>aggregator:</strong>  (optional, default = sum) the function that aggregates individual complexities</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a float, the complexity of a language</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span>,</span><span class=\"param\">\t<span class=\"n\">expression_complexity_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">aggregator</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">sum</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling": {"fullname": "ultk.language.sampling", "modulename": "ultk.language.sampling", "kind": "module", "doc": "<p></p>\n"}, "ultk.language.sampling.powerset": {"fullname": "ultk.language.sampling.powerset", "modulename": "ultk.language.sampling", "qualname": "powerset", "kind": "function", "doc": "<p>Enumerate all _non-empty_ subsets of an iterable up to a given maximum size, e.g.:\npowerset([1,2,3]) --> (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)</p>\n\n<p>lightly adapted from itertools Recipes at\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\">https://docs.python.org/3/library/itertools.html#itertools-recipes</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>iterable:</strong>  elements from which to form subsets</li>\n<li><strong>max_size:</strong>  largest subsets (inclusive) to return</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>iterator over all subsets from size 1 to <code>max_size</code> of elements from <code>iterable</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span>, </span><span class=\"param\"><span class=\"n\">max_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.all_meanings": {"fullname": "ultk.language.sampling.all_meanings", "modulename": "ultk.language.sampling", "qualname": "all_meanings", "kind": "function", "doc": "<p>Generate all Meanings (sets of Referents) from a given Universe.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">universe</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Universe</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.all_expressions": {"fullname": "ultk.language.sampling.all_expressions", "modulename": "ultk.language.sampling", "qualname": "all_expressions", "kind": "function", "doc": "<p>Generate Expressions from an iterable of Meanings.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">meanings</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.all_languages": {"fullname": "ultk.language.sampling.all_languages", "modulename": "ultk.language.sampling", "qualname": "all_languages", "kind": "function", "doc": "<p>Generate all Languages (sets of Expressions) from a given set of Expressions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  iterable of all possible expressions</li>\n<li><strong>language_class:</strong>  the type of language to generate</li>\n<li><strong>max_size:</strong>  largest size for a language; if None, all subsets of expressions will be used</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p>Languages with subsets of Expressions from <code>expressions</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\tlanguage_class: Type[ultk.language.language.Language] = &lt;class &#x27;ultk.language.language.Language&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">max_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.upto_comb": {"fullname": "ultk.language.sampling.upto_comb", "modulename": "ultk.language.sampling", "qualname": "upto_comb", "kind": "function", "doc": "<p>Return the number of ways of choosing _up to max_k_ items from\nn items without repetition.  Just an iterator of math.comb for n from\n1 to max_k.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">max_k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.random_languages": {"fullname": "ultk.language.sampling.random_languages", "modulename": "ultk.language.sampling", "qualname": "random_languages", "kind": "function", "doc": "<p>Generate unique Languages by randomly sampling subsets of Expressions, either in a uniform or stratified way.\nIf there are fewer than <code>sample_size</code> possible Languages up to size <code>max_size</code>,\nthis method will just return all languages up to that size (and so the sample may\nbe smaller than <code>sample_size</code>).</p>\n\n<p>Some use cases:</p>\n\n<p>With <code>sample_size=None</code>, get all languages.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">random_languages</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>With <code>sample_size</code> and uniform sampling, get random languages:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">random_languages</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Stratified sampling, with and without a <code>max_size</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">random_languages</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">sampling_strategy</span><span class=\"o\">=</span><span class=\"s2\">&quot;stratified&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">random_languages</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">sampling_strategy</span><span class=\"o\">=</span><span class=\"s2\">&quot;stratified&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  all possible expressions</li>\n<li><strong>sampling_strategy:</strong>  how to sample subsets of expressions\nuniform: for every expression, choose whether or not to include it in a given language\nstratified: first sample a size for a Language, then choose that many random Expressions\n    (i) this has the effect of \"upsampling\" from smaller Language sizes\n    (ii) this can be used with <code>max_size</code> to only generate Languages up to a given number of expressions</li>\n<li><strong>sample_size:</strong>  how many languages to return\nif None, will return all languages up to <code>max_size</code></li>\n<li><strong>language_class:</strong>  type of Language</li>\n<li><strong>max_size:</strong>  largest possible Language to generate\nif None, will be the length of <code>expressions</code>\nNB: this argument has no effect when <code>sampling_strategy</code> is \"uniform\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a list of randomly sampled Languages</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;uniform&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tlanguage_class: Type[ultk.language.language.Language] = &lt;class &#x27;ultk.language.language.Language&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">max_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.generate_languages": {"fullname": "ultk.language.sampling.generate_languages", "modulename": "ultk.language.sampling", "qualname": "generate_languages", "kind": "function", "doc": "<p>Generate languages by randomly sampling vocabularies as bags of expressions.</p>\n\n<p>A predicate (binary-valued property) of expressions may be supplied, which can be used to adjust the composition of vocabularies (e.g., by the percent of expressions satisfying the predicate).</p>\n\n<p>If sample size &lt;= nCr, then take a random sample_size set of combinations. Otherwise, to prevent repeat languages, treat nCr as the sample size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  a list of the possible expressions to sample from.</li>\n<li><strong>lang_size:</strong>  the maximum (or exact) number of expressions in each language.</li>\n<li><strong>sample_size:</strong>  the number of languages to generate.</li>\n<li><strong>criterion:</strong>  the predicate, (e.g. semantic universal) by which to split the expressions into those satisfying and those not, and then sample languages with degrees of naturalness based on the percentage from those satisfying. Must apply at the expression level. By default is a trivial criterion, so that all expressions are 'quasi-natural'.</li>\n<li><strong>fixed_wordcount:</strong>  whether to vary the language size from 1 to lang_size.</li>\n<li><strong>verbose:</strong>  How detailed the progress of sampling should be, printed to stdout.</li>\n<li><strong>dummy_name:</strong>  the default name to give to each sampled language, e.g. <code>sampled_lang_42</code>. These should not collide with any actual natural language names if the efficient communication experiment does use natural language data.</li>\n<li><strong>id_start:</strong>  an integer representing the number of languages already generated in an experiment. Languages sampled will be named according to this number. For example, if id_start is 0, the first language sampled will be named <code>sampled_lang_0</code>. Note that the largest id does not necessarily track the actual size of languages saved for the experiment, but it does track how many languages have been generated.</li>\n<li><strong>exact_sample:</strong>  a boolean representing whether to sample until the exact sample size is filled. If True, the resulting pool of languages may not be unique.</li>\n<li><strong>verbose:</strong>  a boolean representing how verbose output should be during sampling.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict representing the generated pool of languages and the updated id_start, of the form</p>\n\n<pre><code>{\n    \"languages\": (list of updated languages)\n    \"id_start\": (updated length of languages)\n}\n</code></pre>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Turn the knob on a universal property for modals</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"n\">load_expressions</span><span class=\"p\">(</span><span class=\"n\">expressions_file</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">universal_property</span> <span class=\"o\">=</span> <span class=\"n\">iff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">generate_languages</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>   <span class=\"n\">ModalLanguage</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>   <span class=\"n\">expressions</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>   <span class=\"n\">lang_size</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>   <span class=\"n\">sample_size</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>   <span class=\"n\">universal_property</span><span class=\"p\">,</span>\n<span class=\"go\">...)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">languages</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;languages&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">id_start</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;id_start&quot;</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lang_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_wordcount</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dummy_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;sampled_lang_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">id_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">exact_sample</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.sample_lang_size": {"fullname": "ultk.language.sampling.sample_lang_size", "modulename": "ultk.language.sampling", "qualname": "sample_lang_size", "kind": "function", "doc": "<p>Get a sample of languages each of exactly lang_size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language_class:</strong>  a subclass of ultk.Language</li>\n<li><strong>expressions:</strong>  a list of Expressions to sample from</li>\n<li><strong>lang_size:</strong>  int representing the maximum language size to sample</li>\n<li><strong>sample_size:</strong>  int representing the number of total languages to return</li>\n<li><strong>id_start:</strong>  an int representing the number of languages already generated in an experiment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict containing the randomly sampled languages and the updated id_start, of the form</p>\n\n<pre><code>{\n    \"languages\": (list of updated languages)\n    \"id_start\": (updated length of languages)\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lang_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">id_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dummy_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;sampled_lang_id&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.sample_quasi_natural": {"fullname": "ultk.language.sampling.sample_quasi_natural", "modulename": "ultk.language.sampling", "qualname": "sample_quasi_natural", "kind": "function", "doc": "<p>Turn the knob on degree quasi-naturalness for a sample of languages, either by enumerating or randomly sampling unique subsets of all possible combinations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>natural_terms:</strong>  expressions satisfying some criteria of quasi-naturalness, e.g, a semantic universal.</li>\n<li><strong>unnatural_terms:</strong>  expressions not satisfying the criteria.</li>\n<li><strong>lang_size:</strong>  the exact number of expressions a language must have.</li>\n<li><strong>sample_size:</strong>  how many languages to sample.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict containing the randomly sampled quasi-natural languages and the updated id_start, of the form</p>\n\n<pre><code>{\n    \"languages\": (list of updated languages)\n    \"id_start\": (updated length of languages)\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">natural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">unnatural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lang_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">id_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">dummy_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;sampled_lang_id&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.rename_id": {"fullname": "ultk.language.sampling.rename_id", "modulename": "ultk.language.sampling", "qualname": "rename_id", "kind": "function", "doc": "<p>Updates a string of form <code>sampled_lang_X</code> with a new id for X.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.enumerate_all_languages": {"fullname": "ultk.language.sampling.enumerate_all_languages", "modulename": "ultk.language.sampling", "qualname": "enumerate_all_languages", "kind": "function", "doc": "<p>When the sample size requested is greater than the size of all possible languages, just enumerate all the possible languages.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language_class:</strong>  the kind of Language to construct</li>\n<li><strong>id_start:</strong>  a number to start counting from for assigning names with numerical ids to languages.</li>\n<li><strong>natural_indices:</strong>  the indices of quasi-natural languages already seen</li>\n<li><strong>num_natural:</strong>  the number of quasi-natural languages to sample</li>\n<li><strong>natural_terms:</strong>  the list of quasi-natural terms to sample from</li>\n<li><strong>unnatural_indices:</strong>  the indices of non-quasi-natural languages already seen</li>\n<li><strong>num_unnatural:</strong>  the number of non-quasi-natural languages to sample; 0 by default</li>\n<li><strong>unnatural_terms:</strong>  the list of non-quasi-natural terms to sample from; empty by default.</li>\n<li><strong>dummy_name:</strong>  the format of the string to name each language constructed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a dict containing a set of languages and the updated id_start,  of the form</p>\n\n<pre><code>{\n    \"languages\": (list of updated languages)\n    \"id_start\": (updated length of languages)\n}\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">id_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">natural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">natural_indices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">num_natural</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unnatural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">unnatural_indices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">num_unnatural</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">dummy_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;sampled_lang_id&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.sampling.random_combination_vocabulary": {"fullname": "ultk.language.sampling.random_combination_vocabulary", "modulename": "ultk.language.sampling", "qualname": "random_combination_vocabulary", "kind": "function", "doc": "<p>Get a single vocabulary for a specific language size by choosing a random combination of natural and unnatural terms.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seen:</strong>  the list of language indices already seen</li>\n<li><strong>num_natural:</strong>  int</li>\n<li><strong>natural_terms:</strong>  list[Expression]</li>\n<li><strong>num_unnatural:</strong>  int=0</li>\n<li><strong>unnatural_terms:</strong>  list[Expression]=[]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>languages: the extended list of input languages.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">seen</span><span class=\"p\">:</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">num_natural</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">natural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">num_unnatural</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">unnatural_terms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Language</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "ultk.language.semantics": {"fullname": "ultk.language.semantics", "modulename": "ultk.language.semantics", "kind": "module", "doc": "<p>Classes for modeling the meanings of a language.</p>\n\n<p>Meanings are modeled as things which map linguistic forms to objects of reference. The linguistic forms and objects of reference can in principle be very detailed, and future work may elaborate the meaning classes and implement a Form class.</p>\n\n<p>In efficient communication analyses, simplicity and informativeness can be measured as properties of semantic aspects of a language. E.g., a meaning is simple if it is easy to represent, or to compress into some code; a meaning is informative if it is easy for a listener to recover a speaker's intended literal meaning.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ultk.language.semantics</span> <span class=\"kn\">import</span> <span class=\"n\">Referent</span><span class=\"p\">,</span> <span class=\"n\">Meaning</span><span class=\"p\">,</span> <span class=\"n\">Universe</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ultk.language.language</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># construct the meaning space for numerals</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">numerals_universe</span> <span class=\"o\">=</span> <span class=\"n\">NumeralUniverse</span><span class=\"p\">(</span><span class=\"n\">referents</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">NumeralReferent</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># construct a list of referents for the expression &#39;a few&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a_few_refs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NumeralReferent</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a_few_meaning</span> <span class=\"o\">=</span> <span class=\"n\">NumeralMeaning</span><span class=\"p\">(</span><span class=\"n\">referents</span><span class=\"o\">=</span><span class=\"n\">a_few_refs</span><span class=\"p\">,</span> <span class=\"n\">universe</span><span class=\"o\">=</span><span class=\"n\">numerals_universe</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># define the expression</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a_few</span> <span class=\"o\">=</span> <span class=\"n\">NumeralExpression</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"s2\">&quot;a few&quot;</span><span class=\"p\">,</span> <span class=\"n\">meaning</span><span class=\"o\">=</span><span class=\"n\">a_few_meaning</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, "ultk.language.semantics.Referent": {"fullname": "ultk.language.semantics.Referent", "modulename": "ultk.language.semantics", "qualname": "Referent", "kind": "class", "doc": "<p>A referent is some object in the universe for a language.</p>\n"}, "ultk.language.semantics.Referent.__init__": {"fullname": "ultk.language.semantics.Referent.__init__", "modulename": "ultk.language.semantics", "qualname": "Referent.__init__", "kind": "function", "doc": "<p>Initialize a referent.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  a string representing the name of the referent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "ultk.language.semantics.Referent.name": {"fullname": "ultk.language.semantics.Referent.name", "modulename": "ultk.language.semantics", "qualname": "Referent.name", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.semantics.Referent.to_dict": {"fullname": "ultk.language.semantics.Referent.to_dict", "modulename": "ultk.language.semantics", "qualname": "Referent.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "ultk.language.semantics.Universe": {"fullname": "ultk.language.semantics.Universe", "modulename": "ultk.language.semantics", "qualname": "Universe", "kind": "class", "doc": "<p>The universe is the set of possible referent objects for a meaning.</p>\n"}, "ultk.language.semantics.Universe.__init__": {"fullname": "ultk.language.semantics.Universe.__init__", "modulename": "ultk.language.semantics", "qualname": "Universe.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">referents</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "ultk.language.semantics.Universe.referents": {"fullname": "ultk.language.semantics.Universe.referents", "modulename": "ultk.language.semantics", "qualname": "Universe.referents", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.semantics.Universe.set_prior": {"fullname": "ultk.language.semantics.Universe.set_prior", "modulename": "ultk.language.semantics", "qualname": "Universe.set_prior", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.semantics.Universe.prior_numpy": {"fullname": "ultk.language.semantics.Universe.prior_numpy", "modulename": "ultk.language.semantics", "qualname": "Universe.prior_numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "ultk.language.semantics.Universe.from_dataframe": {"fullname": "ultk.language.semantics.Universe.from_dataframe", "modulename": "ultk.language.semantics", "qualname": "Universe.from_dataframe", "kind": "function", "doc": "<p>Build a Universe from a DataFrame.\nIt's assumed that each row specifies one Referent, and each column will be a property\nof that Referent.  We assume that <code>name</code> is one of the columns of the DataFrame.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>a DataFrame representing the meaning space of interest, assumed to have a column <code>name</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.semantics.Universe.from_csv": {"fullname": "ultk.language.semantics.Universe.from_csv", "modulename": "ultk.language.semantics", "qualname": "Universe.from_csv", "kind": "function", "doc": "<p>Build a Universe from a CSV file.  This is a small wrapper around\n<code>Universe.from_dataframe</code>, so see that documentation for more information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "ultk.language.semantics.Meaning": {"fullname": "ultk.language.semantics.Meaning", "modulename": "ultk.language.semantics", "qualname": "Meaning", "kind": "class", "doc": "<p>A meaning picks out a set of objects from the universe.</p>\n\n<p>On one tradition (from formal semantics), we might model an underspecified meaning as a subset of the universe.\nSometimes these different referents are not equally likely,\nin which it can be helpful to define a meaning explicitly as a distribution over the universe.</p>\n"}, "ultk.language.semantics.Meaning.__init__": {"fullname": "ultk.language.semantics.Meaning.__init__", "modulename": "ultk.language.semantics", "qualname": "Meaning.__init__", "kind": "function", "doc": "<p>A meaning is the set of things it refers to.</p>\n\n<p>The objects of reference are a subset of the universe of discourse. Sometimes it is natural to construe the meaning as as a probability distribution over the universe, instead of just a binary predicate.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>referents:</strong>  a list of Referent objects, which must be a subset of the referents in <code>universe</code>.</li>\n<li><strong>universe:</strong>  a Universe object that defines the probability space for a meaning.</li>\n<li><strong>dist:</strong>  a dict of with Referent names as keys and weights or probabilities as values, representing the distribution over referents to associate with the meaning. By default is None, and the distribution will be uniform over the passed referents, and any remaining referents are assigned 0 probability.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">referents</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Referent</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span><span class=\"p\">:</span> <span class=\"n\">ultk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Universe</span>,</span><span class=\"param\">\t<span class=\"n\">dist</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "ultk.language.semantics.Meaning.referents": {"fullname": "ultk.language.semantics.Meaning.referents", "modulename": "ultk.language.semantics", "qualname": "Meaning.referents", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.semantics.Meaning.universe": {"fullname": "ultk.language.semantics.Meaning.universe", "modulename": "ultk.language.semantics", "qualname": "Meaning.universe", "kind": "variable", "doc": "<p></p>\n"}, "ultk.language.semantics.Meaning.to_dict": {"fullname": "ultk.language.semantics.Meaning.to_dict", "modulename": "ultk.language.semantics", "qualname": "Meaning.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"ultk": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 771}, "ultk.effcomm": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 361}, "ultk.effcomm.agent": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 30}, "ultk.effcomm.agent.CommunicativeAgent": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "ultk.effcomm.agent.CommunicativeAgent.language": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 19}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 87}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 3}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 62}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 80}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 163}, "ultk.effcomm.agent.Speaker": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "ultk.effcomm.agent.Speaker.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "ultk.effcomm.agent.Speaker.S": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.Speaker.normalized_weights": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 27}, "ultk.effcomm.agent.Listener": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "ultk.effcomm.agent.Listener.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "ultk.effcomm.agent.Listener.R": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.Listener.normalized_weights": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 30}, "ultk.effcomm.agent.LiteralSpeaker": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 70}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "ultk.effcomm.agent.LiteralSpeaker.S": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.LiteralListener": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 61}, "ultk.effcomm.agent.LiteralListener.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "ultk.effcomm.agent.LiteralListener.R": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.PragmaticSpeaker": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 43}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 158}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.PragmaticListener": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 45}, "ultk.effcomm.agent.PragmaticListener.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 122}, "ultk.effcomm.agent.PragmaticListener.R": {"qualname": 2, "fullname": 5, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.agent.BayesianListener": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 108}, "ultk.effcomm.agent.BayesianListener.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 80}, "ultk.effcomm.analysis": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 15}, "ultk.effcomm.analysis.get_dataframe": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 153}, "ultk.effcomm.analysis.pearson_analysis": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 153}, "ultk.effcomm.analysis.trade_off_means": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 294}, "ultk.effcomm.analysis.trade_off_ttest": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 257}, "ultk.effcomm.information": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 15}, "ultk.effcomm.information.information_rate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 16}, "ultk.effcomm.information.get_rd_curve": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 16}, "ultk.effcomm.information.expected_distortion": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 17}, "ultk.effcomm.information.compute_rate_distortion": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 148}, "ultk.effcomm.information.blahut_arimoto": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 117, "bases": 0, "doc": 260}, "ultk.effcomm.information.get_ib_curve": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 225}, "ultk.effcomm.information.get_bottleneck": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 282}, "ultk.effcomm.information.ib_complexity": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 12}, "ultk.effcomm.information.ib_informativity": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 80}, "ultk.effcomm.information.ib_comm_cost": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 93}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 92}, "ultk.effcomm.information.ib_accuracy": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 107}, "ultk.effcomm.information.ib_distortion": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 115}, "ultk.effcomm.information.ib_encoder_to_point": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 108}, "ultk.effcomm.information.ib_optimal_decoder": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 89}, "ultk.effcomm.informativity": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "ultk.effcomm.informativity.indicator_utility": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 61, "bases": 0, "doc": 16}, "ultk.effcomm.informativity.informativity": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 152, "bases": 0, "doc": 306}, "ultk.effcomm.informativity.communicative_success": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 161}, "ultk.effcomm.optimization": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 22}, "ultk.effcomm.optimization.Mutation": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.Mutation.precondition": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 13}, "ultk.effcomm.optimization.Mutation.mutate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 12}, "ultk.effcomm.optimization.RemoveExpression": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 13}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 12}, "ultk.effcomm.optimization.AddExpression": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "ultk.effcomm.optimization.AddExpression.precondition": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 13}, "ultk.effcomm.optimization.AddExpression.mutate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 12}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 170, "bases": 0, "doc": 184}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 157}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 47}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 73}, "ultk.effcomm.optimization.sample_parents": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 117}, "ultk.effcomm.sampling": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "ultk.effcomm.sampling.get_hypothetical_variants": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 164}, "ultk.effcomm.tradeoff": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 26}, "ultk.effcomm.tradeoff.dominates": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 60}, "ultk.effcomm.tradeoff.non_dominated_2d": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 72}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 132, "bases": 0, "doc": 12}, "ultk.effcomm.tradeoff.pareto_min_distances": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 131}, "ultk.effcomm.tradeoff.interpolate_data": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 86, "bases": 0, "doc": 169}, "ultk.effcomm.tradeoff.tradeoff": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 199, "bases": 0, "doc": 219}, "ultk.effcomm.util": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "ultk.effcomm.util.rows_zero_to_uniform": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 96}, "ultk.effcomm.util.build_utility_matrix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 21}, "ultk.effcomm.util.PRECISION": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 2, "signature": 0, "bases": 0, "doc": 3}, "ultk.effcomm.util.marginal": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 52}, "ultk.effcomm.util.conditional": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 56}, "ultk.effcomm.util.joint": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 69}, "ultk.effcomm.util.marginalize": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 68}, "ultk.effcomm.util.bayes": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 37}, "ultk.effcomm.util.xlogx": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "ultk.effcomm.util.H": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 16}, "ultk.effcomm.util.MI": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 6}, "ultk.effcomm.util.DKL": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 7}, "ultk.effcomm.util.gNID": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 66}, "ultk.language": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 105}, "ultk.language.grammar": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 135}, "ultk.language.grammar.Rule.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 108, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.lhs": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.rhs": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.func": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.weight": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Rule.is_terminal": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "ultk.language.grammar.GrammaticalExpression": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 90}, "ultk.language.grammar.GrammaticalExpression.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.func": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.children": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 51}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.add_child": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "ultk.language.grammar.UniquenessArgs": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 95}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"qualname": 3, "fullname": 6, "annotation": 9, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.UniquenessArgs.key": {"qualname": 2, "fullname": 5, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.UniquenessArgs.compare_func": {"qualname": 3, "fullname": 6, "annotation": 10, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.grammar.Grammar": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "ultk.language.grammar.Grammar.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "ultk.language.grammar.Grammar.add_rule": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 3}, "ultk.language.grammar.Grammar.parse": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 99}, "ultk.language.grammar.Grammar.generate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 10}, "ultk.language.grammar.Grammar.enumerate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 124, "bases": 0, "doc": 165}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 134, "bases": 0, "doc": 12}, "ultk.language.grammar.Grammar.get_unique_expressions": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 194, "bases": 0, "doc": 197}, "ultk.language.grammar.Grammar.get_all_rules": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 9}, "ultk.language.grammar.Grammar.from_yaml": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 97}, "ultk.language.language": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 234}, "ultk.language.language.Expression": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "ultk.language.language.Expression.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "ultk.language.language.Expression.form": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.language.Expression.meaning": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.language.Expression.can_express": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 18}, "ultk.language.language.Expression.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "ultk.language.language.Language": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "ultk.language.language.Language.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 3}, "ultk.language.language.Language.expressions": {"qualname": 2, "fullname": 5, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.language.Language.universe": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.language.Language.add_expression": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 14}, "ultk.language.language.Language.pop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 18}, "ultk.language.language.Language.is_natural": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 11}, "ultk.language.language.Language.degree_property": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 15}, "ultk.language.language.Language.binary_matrix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 24}, "ultk.language.language.Language.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "ultk.language.language.aggregate_expression_complexity": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 128, "bases": 0, "doc": 81}, "ultk.language.sampling": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.sampling.powerset": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 108}, "ultk.language.sampling.all_meanings": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 13}, "ultk.language.sampling.all_expressions": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 10}, "ultk.language.sampling.all_languages": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 82}, "ultk.language.sampling.upto_comb": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 33}, "ultk.language.sampling.random_languages": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 141, "bases": 0, "doc": 457}, "ultk.language.sampling.generate_languages": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 247, "bases": 0, "doc": 639}, "ultk.language.sampling.sample_lang_size": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 135}, "ultk.language.sampling.sample_quasi_natural": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 190, "bases": 0, "doc": 139}, "ultk.language.sampling.rename_id": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 19}, "ultk.language.sampling.enumerate_all_languages": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 254, "bases": 0, "doc": 220}, "ultk.language.sampling.random_combination_vocabulary": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 88}, "ultk.language.semantics": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 456}, "ultk.language.semantics.Referent": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "ultk.language.semantics.Referent.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 26}, "ultk.language.semantics.Referent.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.semantics.Referent.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "ultk.language.semantics.Universe": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 15}, "ultk.language.semantics.Universe.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 3}, "ultk.language.semantics.Universe.referents": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.semantics.Universe.set_prior": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 3}, "ultk.language.semantics.Universe.prior_numpy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "ultk.language.semantics.Universe.from_dataframe": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 67}, "ultk.language.semantics.Universe.from_csv": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 28}, "ultk.language.semantics.Meaning": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 60}, "ultk.language.semantics.Meaning.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 149}, "ultk.language.semantics.Meaning.referents": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.semantics.Meaning.universe": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "ultk.language.semantics.Meaning.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}}, "length": 193, "save": true}, "index": {"qualname": {"root": {"2": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}, "docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 17, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.conditional": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 17, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 9}, "s": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}}, "df": 2}, "d": {"docs": {"ultk.language.sampling.rename_id": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.language.Language.expressions": {"tf": 1}, "ultk.language.language.Language.universe": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}}, "df": 13, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 7}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.Listener": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.lhs": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}}, "df": 3, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 6}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics.Universe.set_prior": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Rule.weight": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 5}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}}, "df": 6, "s": {"docs": {"ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.rename_id": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Rule.lhs": {"tf": 1}, "ultk.language.grammar.Rule.rhs": {"tf": 1}, "ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.Rule.weight": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}}, "df": 10, "s": {"docs": {"ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.rhs": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 14}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.form": {"tf": 1}, "ultk.language.language.Expression.meaning": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 10, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.expressions": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}}, "df": 5}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 3}}}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.util.PRECISION": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"ultk.language.language.Language.pop": {"tf": 1}}, "df": 1}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.util.bayes": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 7}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}, "r": {"docs": {"ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 10}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}, "d": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.DKL": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_accuracy": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.AddExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "t": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 5}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.language.Expression.meaning": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 6, "s": {"docs": {"ultk.language.sampling.all_meanings": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.Mutation": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 4, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.marginalize": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {"ultk.effcomm.util.MI": {"tf": 1}}, "df": 1, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 4}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.universe": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}}, "df": 9}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.language.Expression.form": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"ultk.effcomm.util.H": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.util.joint": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.util.xlogx": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.UniquenessArgs.key": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 1}}}}}}}, "fullname": {"root": {"2": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}, "docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 17, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.Mutation": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.effcomm.util.PRECISION": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Rule.lhs": {"tf": 1}, "ultk.language.grammar.Rule.rhs": {"tf": 1}, "ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.Rule.weight": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.form": {"tf": 1}, "ultk.language.language.Expression.meaning": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.language.Language.expressions": {"tf": 1}, "ultk.language.language.Language.universe": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 193}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.effcomm.util.PRECISION": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 14, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 4}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.universe": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}}, "df": 9}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.Mutation": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.effcomm.util.PRECISION": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 111}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.form": {"tf": 1}, "ultk.language.language.Expression.meaning": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 10, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.expressions": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}}, "df": 5}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 3}}}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 37}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_accuracy": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.AddExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "t": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.conditional": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 17, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 16}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 5}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 9}, "s": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}}, "df": 2}, "d": {"docs": {"ultk.language.sampling.rename_id": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Rule.lhs": {"tf": 1}, "ultk.language.grammar.Rule.rhs": {"tf": 1}, "ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.Rule.weight": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.language.Expression": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.__init__": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.form": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.meaning": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.can_express": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.to_dict": {"tf": 1.4142135623730951}, "ultk.language.language.Language": {"tf": 1.7320508075688772}, "ultk.language.language.Language.__init__": {"tf": 1.7320508075688772}, "ultk.language.language.Language.expressions": {"tf": 1.7320508075688772}, "ultk.language.language.Language.universe": {"tf": 1.7320508075688772}, "ultk.language.language.Language.add_expression": {"tf": 1.7320508075688772}, "ultk.language.language.Language.pop": {"tf": 1.7320508075688772}, "ultk.language.language.Language.is_natural": {"tf": 1.7320508075688772}, "ultk.language.language.Language.degree_property": {"tf": 1.7320508075688772}, "ultk.language.language.Language.binary_matrix": {"tf": 1.7320508075688772}, "ultk.language.language.Language.to_dict": {"tf": 1.7320508075688772}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 84, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 7}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.Listener": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.lhs": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}}, "df": 3, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.sampling": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 15}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 17}}}}}}}, "t": {"docs": {"ultk.language.semantics.Universe.set_prior": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Rule.weight": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 5}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.name": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}}, "df": 6, "s": {"docs": {"ultk.language.semantics.Universe.referents": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.rename_id": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Rule.lhs": {"tf": 1}, "ultk.language.grammar.Rule.rhs": {"tf": 1}, "ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.Rule.weight": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}}, "df": 10, "s": {"docs": {"ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.rhs": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 14}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.util.PRECISION": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"ultk.language.language.Language.pop": {"tf": 1}}, "df": 1}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.util.bayes": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 7}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Rule.lhs": {"tf": 1}, "ultk.language.grammar.Rule.rhs": {"tf": 1}, "ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.Rule.name": {"tf": 1}, "ultk.language.grammar.Rule.weight": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.generate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}}, "df": 32}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}, "d": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.DKL": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.Mutation": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 25}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.language.Expression.meaning": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.referents": {"tf": 1}, "ultk.language.semantics.Meaning.universe": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 6, "s": {"docs": {"ultk.language.sampling.all_meanings": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.Mutation": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 4, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.marginalize": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {"ultk.effcomm.util.MI": {"tf": 1}}, "df": 1, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language.grammar.Rule.func": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.language.Expression.form": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"ultk.effcomm.util.H": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.util.joint": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.util.xlogx": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.UniquenessArgs.key": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 1}}}}}}}, "annotation": {"root": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}, "ultk.language.language.Language.expressions": {"tf": 1.4142135623730951}, "ultk.language.language.Language.universe": {"tf": 1}}, "df": 12, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 7}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.S": {"tf": 1}, "ultk.effcomm.agent.Listener.R": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1}}, "df": 7}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}, "ultk.language.language.Language.universe": {"tf": 1}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.universe": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1.4142135623730951}, "ultk.language.language.Language.expressions": {"tf": 1.4142135623730951}, "ultk.language.language.Language.universe": {"tf": 1}}, "df": 5}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1.4142135623730951}}, "df": 3}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.grammar.UniquenessArgs.key": {"tf": 1}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.language.Language.expressions": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.language.Language.expressions": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.Language.universe": {"tf": 1}}, "df": 1}}}}}}}}}}}, "default_value": {"root": {"1": {"6": {"docs": {"ultk.effcomm.util.PRECISION": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.PRECISION": {"tf": 1}}, "df": 1}}, "docs": {}, "df": 0}}, "signature": {"root": {"0": {"5": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}, "docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 10}, "1": {"0": {"0": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 7, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}, "2": {"0": {"0": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"9": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 2}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2.449489742783178}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}, "ultk.language.grammar.Grammar.parse": {"tf": 2.449489742783178}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}}, "df": 12}, "docs": {}, "df": 0}, "5": {"0": {"0": {"0": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 1}, "docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 5.477225575051661}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 3.4641016151377544}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 6.324555320336759}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 5.656854249492381}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 5.656854249492381}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 5.656854249492381}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 5.656854249492381}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 6.244997998398398}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 4.47213595499958}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 8.717797887081348}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 5.477225575051661}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 4}, "ultk.effcomm.agent.Listener.__init__": {"tf": 5.477225575051661}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 4}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 5.477225575051661}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 5.477225575051661}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 8.246211251235321}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 8.12403840463596}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 7.280109889280518}, "ultk.effcomm.analysis.get_dataframe": {"tf": 10.770329614269007}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 7.3484692283495345}, "ultk.effcomm.analysis.trade_off_means": {"tf": 7.681145747868608}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 7.681145747868608}, "ultk.effcomm.information.information_rate": {"tf": 5.656854249492381}, "ultk.effcomm.information.get_rd_curve": {"tf": 7.810249675906654}, "ultk.effcomm.information.expected_distortion": {"tf": 6.855654600401044}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 5.385164807134504}, "ultk.effcomm.information.blahut_arimoto": {"tf": 9.643650760992955}, "ultk.effcomm.information.get_ib_curve": {"tf": 9.899494936611665}, "ultk.effcomm.information.get_bottleneck": {"tf": 8.94427190999916}, "ultk.effcomm.information.ib_complexity": {"tf": 6.324555320336759}, "ultk.effcomm.information.ib_informativity": {"tf": 7.416198487095663}, "ultk.effcomm.information.ib_comm_cost": {"tf": 7.416198487095663}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 7.483314773547883}, "ultk.effcomm.information.ib_accuracy": {"tf": 6.855654600401044}, "ultk.effcomm.information.ib_distortion": {"tf": 6.855654600401044}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 8.426149773176359}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 7.14142842854285}, "ultk.effcomm.informativity.indicator_utility": {"tf": 7.0710678118654755}, "ultk.effcomm.informativity.informativity": {"tf": 11}, "ultk.effcomm.informativity.communicative_success": {"tf": 10.535653752852738}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 5.830951894845301}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 8.602325267042627}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 5.830951894845301}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 8.602325267042627}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 5.830951894845301}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 8.602325267042627}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 10.908712114635714}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 8.888194417315589}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 7.483314773547883}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 6.782329983125268}, "ultk.effcomm.optimization.sample_parents": {"tf": 9.273618495495704}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 9.797958971132712}, "ultk.effcomm.tradeoff.dominates": {"tf": 5.830951894845301}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 5.830951894845301}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 10.392304845413264}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 6.164414002968976}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 8.246211251235321}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 12.649110640673518}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 4.898979485566356}, "ultk.effcomm.util.build_utility_matrix": {"tf": 9}, "ultk.effcomm.util.marginal": {"tf": 4.242640687119285}, "ultk.effcomm.util.conditional": {"tf": 3.1622776601683795}, "ultk.effcomm.util.joint": {"tf": 3.7416573867739413}, "ultk.effcomm.util.marginalize": {"tf": 3.7416573867739413}, "ultk.effcomm.util.bayes": {"tf": 3.7416573867739413}, "ultk.effcomm.util.xlogx": {"tf": 3.1622776601683795}, "ultk.effcomm.util.H": {"tf": 4.242640687119285}, "ultk.effcomm.util.MI": {"tf": 3.1622776601683795}, "ultk.effcomm.util.DKL": {"tf": 4.69041575982343}, "ultk.effcomm.util.gNID": {"tf": 4.242640687119285}, "ultk.language.grammar.Rule.__init__": {"tf": 9.273618495495704}, "ultk.language.grammar.Rule.is_terminal": {"tf": 3.4641016151377544}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 9.38083151964686}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 3.4641016151377544}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 6.782329983125268}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 4}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 3.4641016151377544}, "ultk.language.grammar.Grammar.__init__": {"tf": 3.4641016151377544}, "ultk.language.grammar.Grammar.add_rule": {"tf": 5.477225575051661}, "ultk.language.grammar.Grammar.parse": {"tf": 9.219544457292887}, "ultk.language.grammar.Grammar.generate": {"tf": 6.164414002968976}, "ultk.language.grammar.Grammar.enumerate": {"tf": 10.099504938362077}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 10.488088481701515}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 12.529964086141668}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 5.385164807134504}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 4.242640687119285}, "ultk.language.language.Expression.__init__": {"tf": 7.483314773547883}, "ultk.language.language.Expression.can_express": {"tf": 5.656854249492381}, "ultk.language.language.Expression.to_dict": {"tf": 3.4641016151377544}, "ultk.language.language.Language.__init__": {"tf": 6.48074069840786}, "ultk.language.language.Language.add_expression": {"tf": 5.477225575051661}, "ultk.language.language.Language.pop": {"tf": 5.656854249492381}, "ultk.language.language.Language.is_natural": {"tf": 3.4641016151377544}, "ultk.language.language.Language.degree_property": {"tf": 6.6332495807108}, "ultk.language.language.Language.binary_matrix": {"tf": 4}, "ultk.language.language.Language.to_dict": {"tf": 4.242640687119285}, "ultk.language.language.aggregate_expression_complexity": {"tf": 10.099504938362077}, "ultk.language.sampling.powerset": {"tf": 5.477225575051661}, "ultk.language.sampling.all_meanings": {"tf": 7.483314773547883}, "ultk.language.sampling.all_expressions": {"tf": 7.810249675906654}, "ultk.language.sampling.all_languages": {"tf": 8.888194417315589}, "ultk.language.sampling.upto_comb": {"tf": 4.898979485566356}, "ultk.language.sampling.random_languages": {"tf": 10.04987562112089}, "ultk.language.sampling.generate_languages": {"tf": 13.892443989449804}, "ultk.language.sampling.sample_lang_size": {"tf": 11.40175425099138}, "ultk.language.sampling.sample_quasi_natural": {"tf": 12.12435565298214}, "ultk.language.sampling.rename_id": {"tf": 4.898979485566356}, "ultk.language.sampling.enumerate_all_languages": {"tf": 14.177446878757825}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 10.816653826391969}, "ultk.language.semantics.Referent.__init__": {"tf": 5.744562646538029}, "ultk.language.semantics.Referent.to_dict": {"tf": 3.4641016151377544}, "ultk.language.semantics.Universe.__init__": {"tf": 7.416198487095663}, "ultk.language.semantics.Universe.set_prior": {"tf": 5.291502622129181}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 4}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 5.477225575051661}, "ultk.language.semantics.Universe.from_csv": {"tf": 4.242640687119285}, "ultk.language.semantics.Meaning.__init__": {"tf": 8.717797887081348}, "ultk.language.semantics.Meaning.to_dict": {"tf": 3.4641016151377544}}, "df": 119, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 5, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 2}, "ultk.effcomm.agent.Listener.__init__": {"tf": 2}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 2}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 2}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 2}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 2}, "ultk.effcomm.information.ib_informativity": {"tf": 2}, "ultk.effcomm.information.ib_comm_cost": {"tf": 2}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 2}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 2.449489742783178}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 2}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 3}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 2}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 3}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 2}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 3}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 2.6457513110645907}, "ultk.effcomm.optimization.sample_parents": {"tf": 3}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 3}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 3}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1.4142135623730951}, "ultk.language.language.Language.add_expression": {"tf": 1.4142135623730951}, "ultk.language.language.Language.pop": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1.4142135623730951}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2.449489742783178}, "ultk.language.sampling.all_meanings": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1.7320508075688772}, "ultk.language.sampling.all_languages": {"tf": 3.4641016151377544}, "ultk.language.sampling.random_languages": {"tf": 3.4641016151377544}, "ultk.language.sampling.generate_languages": {"tf": 2.8284271247461903}, "ultk.language.sampling.sample_lang_size": {"tf": 3}, "ultk.language.sampling.sample_quasi_natural": {"tf": 2.8284271247461903}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2.8284271247461903}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 2.6457513110645907}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 62, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 6}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}}, "df": 25, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}}, "df": 2}}}}, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule.__init__": {"tf": 1.4142135623730951}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 7}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 2}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 63}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 2}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "k": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}}, "df": 16}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 38}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 14}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}, "n": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}, "t": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 2}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 2}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 26, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 5}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 4, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 5, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}}, "df": 8}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 2.23606797749979}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 2}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 2}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 25, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 5, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_rd_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.expected_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.4142135623730951}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 28}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_rd_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.expected_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.4142135623730951}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1}}, "df": 28}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}}, "df": 10}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2.23606797749979}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 26}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1.7320508075688772}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 7}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}}, "df": 5}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"1": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}, "2": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.can_express": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {"ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {"ultk.language.language.Language.add_expression": {"tf": 1}}, "df": 1, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2, "d": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 6}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 5}}}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Expression.to_dict": {"tf": 1}, "ultk.language.language.Language.to_dict": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Referent.to_dict": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1}}, "df": 21}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 5, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 4}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 4}}}}, "f": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 10}}}, "e": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 6, "[": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.language.Language.__init__": {"tf": 1}}, "df": 12}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 15}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 6}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}}, "df": 3}}}, "b": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 12}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 7}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 3}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_ib_curve": {"tf": 2}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.7320508075688772}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 30}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.Rule.__init__": {"tf": 1.4142135623730951}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "p": {"1": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}, "2": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}, "docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}}, "df": 6, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.language.semantics.Universe.__init__": {"tf": 1}, "ultk.language.semantics.Universe.set_prior": {"tf": 1}}, "df": 17}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {"ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 4, "y": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}}, "df": 3}}, "y": {"docs": {"ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 3}, "w": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}, "v": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 12}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1}, "ultk.language.language.Expression.__init__": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}}, "df": 13, "s": {"docs": {"ultk.language.sampling.all_expressions": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 5}, "x": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 8, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "x": {"2": {"7": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {}, "df": 0}, "docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1.4142135623730951}}, "df": 8, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule.__init__": {"tf": 1.4142135623730951}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 7}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}}, "df": 5}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.add_rule": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}}, "df": 7}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}}, "df": 5}}}}}}}}}}}}}}}}}}}}}, "y": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}, "q": {"docs": {"ultk.effcomm.util.DKL": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 4}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.Speaker": {"tf": 1}, "ultk.effcomm.agent.Listener": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.RemoveExpression": {"tf": 1}, "ultk.effcomm.optimization.AddExpression": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}}, "df": 1}}}}}}}}}}}, "doc": {"root": {"0": {"1": {"1": {"8": {"1": {"7": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"8": {"3": {"0": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"7": {"2": {"0": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"1": {"0": {"2": {"7": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"2": {"9": {"2": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"5": {"4": {"0": {"6": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2.449489742783178}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 2}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2.449489742783178}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 16, "s": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}, "1": {"0": {"0": {"0": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}, "1": {"9": {"3": {"7": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "docs": {}, "df": 0}, "9": {"docs": {}, "df": 0, "\u2013": {"1": {"2": {"8": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 2}, "1": {"1": {"1": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "docs": {}, "df": 0}, "2": {"6": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}}, "docs": {}, "df": 0}, "4": {"6": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}}, "docs": {}, "df": 0}, "5": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {"ultk": {"tf": 1}}, "df": 1}, "2": {"1": {"8": {"8": {"1": {"1": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"8": {"5": {"5": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"1": {"4": {"2": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "8": {"0": {"0": {"5": {"2": {"1": {"1": {"1": {"5": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 2.449489742783178}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 19, "d": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}, "2": {"0": {"1": {"8": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "2": {"1": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "2": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "3": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "3": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "7": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 2.23606797749979}, "ultk.language.semantics": {"tf": 1}}, "df": 5, "d": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 5}}, "3": {"1": {"2": {"3": {"4": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 1}}, "df": 1}, "3": {"9": {"0": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"2": {"3": {"1": {"0": {"1": {"3": {"3": {"5": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"6": {"5": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"ultk": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 2.23606797749979}}, "df": 4}, "4": {"0": {"0": {"0": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}, "6": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {"ultk": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}}, "df": 2}, "5": {"2": {"5": {"1": {"1": {"8": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"4": {"6": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 1}}, "df": 1}, "6": {"8": {"1": {"0": {"6": {"8": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}, "7": {"4": {"6": {"2": {"9": {"6": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"2": {"2": {"2": {"2": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"3": {"7": {"docs": {}, "df": 0, "\u2013": {"7": {"9": {"4": {"2": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"3": {"2": {"0": {"1": {"0": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"5": {"2": {"2": {"8": {"0": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"3": {"1": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 14.317821063276353}, "ultk.effcomm": {"tf": 6.928203230275509}, "ultk.effcomm.agent": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.agent.CommunicativeAgent.language": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.shape": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 5}, "ultk.effcomm.agent.CommunicativeAgent.referent_to_index": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.index_to_referent": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.expression_to_index": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.index_to_expression": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 4.47213595499958}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 4.69041575982343}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 6.557438524302}, "ultk.effcomm.agent.Speaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.agent.Speaker.S": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 2.6457513110645907}, "ultk.effcomm.agent.Listener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Listener.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.agent.Listener.R": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 2}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.agent.LiteralSpeaker.S": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.agent.LiteralListener.R": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 6.164414002968976}, "ultk.effcomm.agent.PragmaticSpeaker.S": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 5.5677643628300215}, "ultk.effcomm.agent.PragmaticListener.R": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.BayesianListener": {"tf": 4.898979485566356}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 4.69041575982343}, "ultk.effcomm.analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.get_dataframe": {"tf": 6.855654600401044}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 6.928203230275509}, "ultk.effcomm.analysis.trade_off_means": {"tf": 12.68857754044952}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 9.746794344808963}, "ultk.effcomm.information": {"tf": 1.7320508075688772}, "ultk.effcomm.information.information_rate": {"tf": 2}, "ultk.effcomm.information.get_rd_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.expected_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 6.6332495807108}, "ultk.effcomm.information.blahut_arimoto": {"tf": 7.874007874011811}, "ultk.effcomm.information.get_ib_curve": {"tf": 8.12403840463596}, "ultk.effcomm.information.get_bottleneck": {"tf": 8.54400374531753}, "ultk.effcomm.information.ib_complexity": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_informativity": {"tf": 5.916079783099616}, "ultk.effcomm.information.ib_comm_cost": {"tf": 6}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 6.164414002968976}, "ultk.effcomm.information.ib_accuracy": {"tf": 7.280109889280518}, "ultk.effcomm.information.ib_distortion": {"tf": 7.54983443527075}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 6.6332495807108}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 6.782329983125268}, "ultk.effcomm.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 7.681145747868608}, "ultk.effcomm.informativity.communicative_success": {"tf": 6.782329983125268}, "ultk.effcomm.optimization": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.Mutation": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.RemoveExpression": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.AddExpression": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 7}, "ultk.effcomm.optimization.EvolutionaryOptimizer.objectives": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.expressions": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutations": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_size": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.max_mutations": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.generations": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.lang_size": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.dominating_languages": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.explored_languages": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 6.244997998398398}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 5.196152422706632}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 5.0990195135927845}, "ultk.effcomm.optimization.sample_parents": {"tf": 6.244997998398398}, "ultk.effcomm.sampling": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 6.48074069840786}, "ultk.effcomm.tradeoff": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.dominates": {"tf": 5}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 4.795831523312719}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 5.5677643628300215}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 6.4031242374328485}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 7}, "ultk.effcomm.util": {"tf": 1.7320508075688772}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 4.358898943540674}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.7320508075688772}, "ultk.effcomm.util.PRECISION": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginal": {"tf": 5.0990195135927845}, "ultk.effcomm.util.conditional": {"tf": 5.385164807134504}, "ultk.effcomm.util.joint": {"tf": 5.916079783099616}, "ultk.effcomm.util.marginalize": {"tf": 5.744562646538029}, "ultk.effcomm.util.bayes": {"tf": 4.123105625617661}, "ultk.effcomm.util.xlogx": {"tf": 1.7320508075688772}, "ultk.effcomm.util.H": {"tf": 1.7320508075688772}, "ultk.effcomm.util.MI": {"tf": 1.4142135623730951}, "ultk.effcomm.util.DKL": {"tf": 1.4142135623730951}, "ultk.effcomm.util.gNID": {"tf": 5.744562646538029}, "ultk.language": {"tf": 4}, "ultk.language.grammar": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 5.385164807134504}, "ultk.language.grammar.Rule.__init__": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.lhs": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.rhs": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.func": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.name": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.weight": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression": {"tf": 5}, "ultk.language.grammar.GrammaticalExpression.__init__": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.rule_name": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.func": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.children": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 2.8284271247461903}, "ultk.language.grammar.GrammaticalExpression.evaluate": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.add_child": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.to_dict": {"tf": 1.7320508075688772}, "ultk.language.grammar.UniquenessArgs": {"tf": 5}, "ultk.language.grammar.UniquenessArgs.unique_expressions": {"tf": 1.7320508075688772}, "ultk.language.grammar.UniquenessArgs.key": {"tf": 1.7320508075688772}, "ultk.language.grammar.UniquenessArgs.compare_func": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.__init__": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.add_rule": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.parse": {"tf": 4.58257569495584}, "ultk.language.grammar.Grammar.generate": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.enumerate": {"tf": 5.744562646538029}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 5.830951894845301}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 5.291502622129181}, "ultk.language.language": {"tf": 11.661903789690601}, "ultk.language.language.Expression": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.__init__": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.form": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.meaning": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.can_express": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.to_dict": {"tf": 1.7320508075688772}, "ultk.language.language.Language": {"tf": 1.7320508075688772}, "ultk.language.language.Language.__init__": {"tf": 1.7320508075688772}, "ultk.language.language.Language.expressions": {"tf": 1.7320508075688772}, "ultk.language.language.Language.universe": {"tf": 1.7320508075688772}, "ultk.language.language.Language.add_expression": {"tf": 1.7320508075688772}, "ultk.language.language.Language.pop": {"tf": 1.7320508075688772}, "ultk.language.language.Language.is_natural": {"tf": 1.7320508075688772}, "ultk.language.language.Language.degree_property": {"tf": 1.7320508075688772}, "ultk.language.language.Language.binary_matrix": {"tf": 2.6457513110645907}, "ultk.language.language.Language.to_dict": {"tf": 1.7320508075688772}, "ultk.language.language.aggregate_expression_complexity": {"tf": 5.656854249492381}, "ultk.language.sampling": {"tf": 1.7320508075688772}, "ultk.language.sampling.powerset": {"tf": 5.916079783099616}, "ultk.language.sampling.all_meanings": {"tf": 1.7320508075688772}, "ultk.language.sampling.all_expressions": {"tf": 1.7320508075688772}, "ultk.language.sampling.all_languages": {"tf": 5.5677643628300215}, "ultk.language.sampling.upto_comb": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 14.352700094407323}, "ultk.language.sampling.generate_languages": {"tf": 15.394804318340652}, "ultk.language.sampling.sample_lang_size": {"tf": 6.855654600401044}, "ultk.language.sampling.sample_quasi_natural": {"tf": 6.782329983125268}, "ultk.language.sampling.rename_id": {"tf": 2.23606797749979}, "ultk.language.sampling.enumerate_all_languages": {"tf": 8.06225774829855}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 6.244997998398398}, "ultk.language.semantics": {"tf": 15.556349186104045}, "ultk.language.semantics.Referent": {"tf": 1.7320508075688772}, "ultk.language.semantics.Referent.__init__": {"tf": 3.605551275463989}, "ultk.language.semantics.Referent.name": {"tf": 1.7320508075688772}, "ultk.language.semantics.Referent.to_dict": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.__init__": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.referents": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.set_prior": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.prior_numpy": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 3.872983346207417}, "ultk.language.semantics.Universe.from_csv": {"tf": 2.23606797749979}, "ultk.language.semantics.Meaning": {"tf": 2.449489742783178}, "ultk.language.semantics.Meaning.__init__": {"tf": 5.385164807134504}, "ultk.language.semantics.Meaning.referents": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.universe": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.to_dict": {"tf": 1.7320508075688772}}, "df": 193, "t": {"docs": {"ultk": {"tf": 2}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 5, "h": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 4.358898943540674}, "ultk.effcomm": {"tf": 4.358898943540674}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 2.6457513110645907}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 2.449489742783178}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 3.4641016151377544}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2.6457513110645907}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 2.8284271247461903}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2.6457513110645907}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 2.8284271247461903}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 3.1622776601683795}, "ultk.effcomm.information.information_rate": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 3.1622776601683795}, "ultk.effcomm.information.blahut_arimoto": {"tf": 4.242640687119285}, "ultk.effcomm.information.get_ib_curve": {"tf": 3.605551275463989}, "ultk.effcomm.information.get_bottleneck": {"tf": 4}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 2.23606797749979}, "ultk.effcomm.information.ib_comm_cost": {"tf": 2}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 3.872983346207417}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 3.4641016151377544}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 2.8284271247461903}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 2}, "ultk.effcomm.optimization.sample_parents": {"tf": 2.6457513110645907}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 3.1622776601683795}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2.8284271247461903}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 4}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.language": {"tf": 2}, "ultk.language.grammar.Rule": {"tf": 2.23606797749979}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 2.23606797749979}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.enumerate": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 3.3166247903554}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.can_express": {"tf": 1.4142135623730951}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1.4142135623730951}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2.23606797749979}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 5.0990195135927845}, "ultk.language.sampling.sample_lang_size": {"tf": 2.449489742783178}, "ultk.language.sampling.sample_quasi_natural": {"tf": 2.449489742783178}, "ultk.language.sampling.enumerate_all_languages": {"tf": 3.7416573867739413}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 2.449489742783178}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 3.3166247903554}}, "df": 94, "y": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 6}, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 7}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 4}}, "m": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.language.language": {"tf": 1}}, "df": 2}, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 2}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 2}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 28}, "n": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1.7320508075688772}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 2}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 27}, "n": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1, "t": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"ultk": {"tf": 3.3166247903554}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 2}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.Listener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 2}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 2.6457513110645907}, "ultk.effcomm.information.get_bottleneck": {"tf": 3}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2.6457513110645907}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 2}, "ultk.effcomm.optimization.sample_parents": {"tf": 2.23606797749979}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2.23606797749979}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule": {"tf": 2.449489742783178}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 2.6457513110645907}, "ultk.language.grammar.Grammar.enumerate": {"tf": 3.4641016151377544}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.23606797749979}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 2}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 3}, "ultk.language.sampling.generate_languages": {"tf": 3.4641016151377544}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2.8284271247461903}, "ultk.language.semantics": {"tf": 2}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 66, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 2.23606797749979}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "{": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 7, "s": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 2}}, "df": 6, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}}, "df": 4}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 2}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.semantics": {"tf": 2}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 2.23606797749979}}, "df": 10}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 2}, "ultk.language.grammar.Grammar.enumerate": {"tf": 2.23606797749979}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 6, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 2}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 3}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.language": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 7}}}, "p": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 2}}, "df": 9, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}}, "df": 6}, "s": {"docs": {"ultk.language.sampling.rename_id": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.language.language": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 14, "d": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 18}, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 8}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 7}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 4}}}}}}}}}}, "l": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 2.23606797749979}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}}, "df": 6, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 2.8284271247461903}, "ultk.effcomm": {"tf": 2.449489742783178}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 2}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.7320508075688772}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 2.6457513110645907}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 2}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language": {"tf": 2.23606797749979}, "ultk.language.language": {"tf": 2.6457513110645907}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2}, "ultk.language.sampling.all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 2.449489742783178}, "ultk.language.sampling.generate_languages": {"tf": 2.449489742783178}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 2.23606797749979}, "ultk.language.semantics.Referent": {"tf": 1}}, "df": 47, "s": {"docs": {"ultk": {"tf": 2.449489742783178}, "ultk.effcomm": {"tf": 3}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.sample_parents": {"tf": 2.8284271247461903}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2.6457513110645907}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.language": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 3.605551275463989}, "ultk.language.sampling.generate_languages": {"tf": 4}, "ultk.language.sampling.sample_lang_size": {"tf": 2.6457513110645907}, "ultk.language.sampling.sample_quasi_natural": {"tf": 2.449489742783178}, "ultk.language.sampling.enumerate_all_languages": {"tf": 3.3166247903554}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 30, "e": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 2}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2.23606797749979}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 30, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.language.semantics": {"tf": 1}}, "df": 14, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}}, "df": 2}}}}}, "[": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.language.semantics": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 3}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "w": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "g": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 8}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.language": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 2}}, "f": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "t": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}, "h": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}}, "df": 4}}}, "i": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 2}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.7320508075688772}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 2}}, "df": 13, "n": {"docs": {"ultk": {"tf": 3.3166247903554}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2.23606797749979}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.semantics": {"tf": 2}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 39, "t": {"docs": {"ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 2, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 2}}, "df": 1, "d": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 9}}, "f": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.information.ib_informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2.23606797749979}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}}, "df": 12}}}, "e": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 3, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 9, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 2}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}}, "df": 11, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 4, "s": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"ultk": {"tf": 3}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2.23606797749979}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 2}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 2}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 40, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1.7320508075688772}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 17, "f": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm": {"tf": 1.7320508075688772}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 2, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"6": {"2": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 2.6457513110645907}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}}, "df": 5, "e": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 1}}, "b": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 8}, "[": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}}, "df": 1}, "u": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_distortion": {"tf": 1}}, "df": 5}}}, "m": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "u": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}}, "df": 4}, "w": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}}, "df": 2}}}, "x": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.util.MI": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}}, "|": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 2}}, "i": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}, "a": {"docs": {"ultk": {"tf": 3.3166247903554}, "ultk.effcomm": {"tf": 3.3166247903554}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 2.6457513110645907}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 2.8284271247461903}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 3}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2.6457513110645907}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 2}, "ultk.effcomm.informativity.informativity": {"tf": 3.605551275463989}, "ultk.effcomm.informativity.communicative_success": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 2.449489742783178}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2.6457513110645907}, "ultk.effcomm.tradeoff": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2.449489742783178}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 2.6457513110645907}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.language": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 2.8284271247461903}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 2.6457513110645907}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 2}, "ultk.language.grammar.Grammar": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 2.8284271247461903}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.6457513110645907}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.7320508075688772}, "ultk.language.language": {"tf": 2.8284271247461903}, "ultk.language.language.Expression": {"tf": 1.4142135623730951}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1.4142135623730951}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 2.6457513110645907}, "ultk.language.sampling.generate_languages": {"tf": 2.8284271247461903}, "ultk.language.sampling.sample_lang_size": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 2}, "ultk.language.sampling.rename_id": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}, "ultk.language.semantics": {"tf": 3.872983346207417}, "ultk.language.semantics.Referent": {"tf": 1.4142135623730951}, "ultk.language.semantics.Referent.__init__": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 2.23606797749979}, "ultk.language.semantics.Universe.from_csv": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning": {"tf": 2.23606797749979}, "ultk.language.semantics.Meaning.__init__": {"tf": 3}}, "df": 100, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}, "n": {"docs": {"ultk": {"tf": 2.23606797749979}, "ultk.effcomm": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 36, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 2.23606797749979}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}}, "df": 4}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"ultk": {"tf": 4.242640687119285}, "ultk.effcomm": {"tf": 2.449489742783178}, "ultk.effcomm.agent": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 2}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}, "ultk.effcomm.util": {"tf": 1}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics": {"tf": 2}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 54, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 7, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 6}}}}}}}, "t": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm": {"tf": 3}}, "df": 1}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 9}}}}}}}, "l": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 2}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}}, "df": 23, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 4}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 17, "a": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 64}}}}}}, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 18, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 2.23606797749979}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.Listener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 2.23606797749979}}, "df": 13, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 2}}, "df": 25, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"ultk": {"tf": 2}}, "df": 1}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 11, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}}, "df": 4}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.language": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 7}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1.4142135623730951}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}}, "df": 3, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 2}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 26, "o": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 9, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}}, "df": 8, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 4}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 3, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {"ultk.effcomm.agent": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 1, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 2.8284271247461903}, "ultk.language": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 2}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 2.23606797749979}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 8, "s": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 3, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1}}, "df": 12, "s": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 2}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.random_languages": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2.449489742783178}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk": {"tf": 2.23606797749979}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 5, "s": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 15, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}}, "df": 2}}, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 7, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}, "n": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 8, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 15, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2.449489742783178}}, "df": 3}, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 4}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}}, "df": 6}, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 3}}, "c": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 2}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 7}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 2.6457513110645907}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 7}}}, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 3.3166247903554}, "ultk.language.sampling.generate_languages": {"tf": 3.1622776601683795}, "ultk.language.sampling.sample_lang_size": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2.23606797749979}}, "df": 9, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2.23606797749979}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 6}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 6}}, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {"ultk": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 4, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 3}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 2}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 4.123105625617661}, "ultk.language.sampling.generate_languages": {"tf": 3.3166247903554}, "ultk.language.sampling.sample_lang_size": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 13, "s": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3, "d": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 7}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2.23606797749979}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.4142135623730951}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1.7320508075688772}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 19}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.language": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 1}}}}}}, "e": {"1": {"3": {"1": {"4": {"2": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2.449489742783178}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 2}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 33, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 3}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 9}, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 2.8284271247461903}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 2}}, "df": 2, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.23606797749979}, "ultk.language.language": {"tf": 1.7320508075688772}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1.7320508075688772}}, "df": 22, "s": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.enumerate": {"tf": 2}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 2.6457513110645907}, "ultk.language.sampling.random_languages": {"tf": 3.3166247903554}, "ultk.language.sampling.generate_languages": {"tf": 3.4641016151377544}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}}, "df": 37}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 4}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}}, "df": 20}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 2}}, "s": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 5}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm.agent": {"tf": 1}}, "df": 1}}, "|": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}}, "df": 1}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 3}}, "s": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 4}}}}, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.ib_distortion": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "c": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 7, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 2.6457513110645907}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 9}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 2}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 2}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 23, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 8, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}}}}}}, "p": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 2.23606797749979}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}, "ultk.effcomm.util": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 2}}, "df": 15}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.MI": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 22, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}}}, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2}}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.language": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 2.23606797749979}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 10}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.Rule": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}, "t": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 2}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 10}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {"ultk.language.grammar.Grammar": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2.6457513110645907}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}}, "df": 9}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.7320508075688772}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 4}}, "a": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.language": {"tf": 1.7320508075688772}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 6}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}, "h": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"1": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}, "docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}, "i": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 29, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 7}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"ultk": {"tf": 4.123105625617661}, "ultk.effcomm": {"tf": 4.242640687119285}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 2.8284271247461903}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 2.6457513110645907}, "ultk.effcomm.information.blahut_arimoto": {"tf": 3.4641016151377544}, "ultk.effcomm.information.get_ib_curve": {"tf": 3.4641016151377544}, "ultk.effcomm.information.get_bottleneck": {"tf": 3.605551275463989}, "ultk.effcomm.information.ib_complexity": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 2}, "ultk.effcomm.information.ib_accuracy": {"tf": 2.449489742783178}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2.6457513110645907}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 3.1622776601683795}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 2.6457513110645907}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2.8284271247461903}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 2}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 2.23606797749979}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2.449489742783178}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 3.1622776601683795}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.7320508075688772}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.4142135623730951}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1.7320508075688772}, "ultk.language": {"tf": 2}, "ultk.language.grammar.Rule": {"tf": 2.449489742783178}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1.7320508075688772}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1.7320508075688772}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.23606797749979}, "ultk.language.language.Language.add_expression": {"tf": 1}, "ultk.language.language.Language.pop": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 2.449489742783178}, "ultk.language.sampling.upto_comb": {"tf": 1.7320508075688772}, "ultk.language.sampling.random_languages": {"tf": 2.6457513110645907}, "ultk.language.sampling.generate_languages": {"tf": 4.123105625617661}, "ultk.language.sampling.sample_lang_size": {"tf": 3}, "ultk.language.sampling.sample_quasi_natural": {"tf": 2.6457513110645907}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 3.605551275463989}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}, "ultk.language.semantics": {"tf": 2.449489742783178}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 2}, "ultk.language.semantics.Meaning": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 2.8284271247461903}}, "df": 89, "f": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 9, "s": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1, "l": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 5}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 8}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 12, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 5}}, "e": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 8, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}}, "r": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 31, "g": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {"ultk": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {"ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 7}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 19}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"ultk": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 2}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2.449489742783178}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 3}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 12, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 2.6457513110645907}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 3}, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.7320508075688772}, "ultk.language.language.Language.binary_matrix": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {"ultk.language.semantics": {"tf": 1.7320508075688772}}, "df": 1}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.sampling.sample_lang_size": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}}, "df": 12}, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 6, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 4}}}}}}}}, "n": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}}, "df": 7, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 6}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 10, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 3}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 7}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 13, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 4}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.sampling.sample_lang_size": {"tf": 1.7320508075688772}, "ultk.language.semantics.Referent.__init__": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 30}}}, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 2}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"1": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}, "2": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Referent.__init__": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.language": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.semantics": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 2.23606797749979}}, "df": 9}}}}, "s": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 12, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.language.Language.pop": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 40}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 6}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.language.Language.pop": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 7}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2.23606797749979}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 9}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 2.449489742783178}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 5, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Rule": {"tf": 2}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "w": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 6, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}, "s": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 2.23606797749979}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 7, "h": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.23606797749979}, "ultk.language.language.Language.binary_matrix": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 29}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 6}}, "n": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 7}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 14}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3}}, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}}, "df": 2}, "y": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 9, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 2}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 2}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 28, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 16}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.util.gNID": {"tf": 1.4142135623730951}}, "df": 4}, "|": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}}, "df": 1}}}}, "|": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}}, "df": 2}}}, "h": {"docs": {"ultk.effcomm.util.H": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 7}}, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 7}, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 2}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 1.4142135623730951}}, "df": 3, "{": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 2.23606797749979}}, "df": 4, "}": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}}, "df": 2, "}": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 2}}}}}, "[": {"docs": {}, "df": 0, "j": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"ultk": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {"ultk": {"tf": 2.449489742783178}}, "df": 1}, "c": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "#": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.language": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.language.Language.is_natural": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1.4142135623730951}, "ultk.effcomm.util.DKL": {"tf": 1}}, "df": 5, "o": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.blahut_arimoto": {"tf": 2.23606797749979}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1.4142135623730951}}, "df": 9}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.4142135623730951}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 20, "s": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.util.DKL": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 15, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 10, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 4}, "s": {"docs": {"ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 3}}}, "d": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.util.marginal": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 11, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 5}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.PragmaticListener": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.informativity.indicator_utility": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1.7320508075688772}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 7}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 2}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}}, "df": 1}}}, "f": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 2}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}}, "df": 2}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}}}}, "[": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 2}}}, "p": {"1": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 2}}, "df": 2, "[": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}}, "df": 1}}}, "2": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 2}}, "df": 2, "[": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}}, "df": 1}}}, "docs": {"ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener": {"tf": 2.23606797749979}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.expected_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 2}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 2}, "ultk.effcomm.information.ib_distortion": {"tf": 2}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.communicative_success": {"tf": 2.8284271247461903}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1.4142135623730951}, "ultk.effcomm.util.conditional": {"tf": 1.4142135623730951}, "ultk.effcomm.util.joint": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1.7320508075688772}, "ultk.effcomm.util.xlogx": {"tf": 1}, "ultk.effcomm.util.H": {"tf": 1.4142135623730951}}, "df": 24, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.semantics": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm": {"tf": 2}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.7320508075688772}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.7320508075688772}}, "df": 13}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener": {"tf": 2}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}}, "df": 16}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_means": {"tf": 2.6457513110645907}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 3.1622776601683795}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm": {"tf": 2}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe": {"tf": 1}}, "df": 12}, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 8}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 5, "s": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 2}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 2.449489742783178}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 8}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.sampling.powerset": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_optimal_languages": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 2.23606797749979}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}}, "df": 9}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}}, "df": 2}}}, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1.4142135623730951}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}, "#": {"docs": {}, "df": 0, "l": {"4": {"0": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 2}}, "df": 1}}}}}}, "d": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1}}, "df": 1}, "x": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}}, "df": 4, "y": {"docs": {"ultk.effcomm.util.marginal": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}}, "df": 3}}, "w": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}, "v": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 2.449489742783178}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 2.449489742783178}, "ultk.effcomm.agent.BayesianListener": {"tf": 2.23606797749979}, "ultk.effcomm.information.ib_accuracy": {"tf": 2.8284271247461903}, "ultk.effcomm.information.ib_distortion": {"tf": 3.4641016151377544}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 2.23606797749979}, "ultk.effcomm.informativity.informativity": {"tf": 2.6457513110645907}, "ultk.effcomm.informativity.communicative_success": {"tf": 3.605551275463989}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 5}}, "a": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1, "l": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Language": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 2.449489742783178}}, "df": 8, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 6}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.language": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"ultk.language.language": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}}, "df": 1}}, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1.4142135623730951}}, "df": 3, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}}, "df": 6}}}, "x": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}}, "df": 11}}}, "[": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}, "h": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "}": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "y": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}, "ultk.language.semantics": {"tf": 1}}, "df": 6}, "d": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 10, "s": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}}, "df": 3}, "d": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_accuracy": {"tf": 1}, "ultk.effcomm.information.ib_distortion": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language": {"tf": 2.23606797749979}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.language.Expression.can_express": {"tf": 1}, "ultk.language.semantics": {"tf": 3}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1.7320508075688772}, "ultk.language.semantics.Meaning.__init__": {"tf": 2}}, "df": 29, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 2.23606797749979}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 2}, "ultk.effcomm.information.get_bottleneck": {"tf": 2.23606797749979}, "ultk.effcomm.information.ib_informativity": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_comm_cost": {"tf": 2}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1.7320508075688772}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 2.23606797749979}, "ultk.effcomm.informativity.informativity": {"tf": 2.23606797749979}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1.7320508075688772}, "ultk.language": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 27}}}}, "s": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 3.872983346207417}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 12}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.language": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "|": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 1}, "w": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.Mutation.precondition": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.precondition": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 2}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"ultk.effcomm.optimization.Mutation.mutate": {"tf": 1}, "ultk.effcomm.optimization.RemoveExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.AddExpression.mutate": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 4, "d": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.mutate": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.util.MI": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {"ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.23606797749979}}, "df": 4, "s": {"docs": {"ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 4}}}, "l": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.util.DKL": {"tf": 1}}, "df": 2, "}": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "m": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "q": {"docs": {"ultk.effcomm.util.DKL": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {"ultk.language.language": {"tf": 2.449489742783178}, "ultk.language.semantics": {"tf": 2.6457513110645907}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.sampling.random_languages": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 3.3166247903554}, "ultk.effcomm": {"tf": 3.7416573867739413}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 2}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.7320508075688772}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1.4142135623730951}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.7320508075688772}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.dominates": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1.4142135623730951}, "ultk.language": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1.4142135623730951}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 2.449489742783178}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.language": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics": {"tf": 2.449489742783178}, "ultk.language.semantics.Referent": {"tf": 1}, "ultk.language.semantics.Universe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 61, "m": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.language.Expression": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.rename_id": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 2}, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {"ultk.language.semantics.Meaning": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 4, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 2}}, "df": 5}}}}}, "m": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.7320508075688772}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 2}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.upto_comb": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.7320508075688772}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1.4142135623730951}, "ultk.language.semantics.Meaning": {"tf": 1.4142135623730951}}, "df": 30}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}}, "df": 5}}}}}}, "c": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "p": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.gNID": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 3, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 6, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.indicator_utility": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 2}, "ultk.effcomm.informativity.communicative_success": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.build_utility_matrix": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.7320508075688772}, "ultk.language.grammar.Rule.is_terminal": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1.4142135623730951}, "ultk.language.grammar.UniquenessArgs": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.7320508075688772}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1.4142135623730951}}, "df": 17, "s": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.analysis": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.informativity": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.sampling": {"tf": 1}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.util": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 10}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 2}}, "df": 1, "y": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}, "e": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.language.aggregate_expression_complexity": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.language.Expression.can_express": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}}, "df": 4}}}}}}}, "h": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 2}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.analysis.pearson_analysis": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 2.6457513110645907}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"ultk": {"tf": 1}, "ultk.language": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.information": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 5}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.information.ib_optimal_decoder": {"tf": 1}}, "df": 3}}}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 2}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 2.6457513110645907}, "ultk.language.semantics": {"tf": 1.4142135623730951}, "ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Meaning": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1.4142135623730951}}, "df": 36, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.7320508075688772}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.util.gNID": {"tf": 1}, "ultk.language": {"tf": 1}}, "df": 13}, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 2}}, "df": 3, "s": {"docs": {"ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.language": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.semantics.Universe.from_dataframe": {"tf": 1}, "ultk.language.semantics.Universe.from_csv": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}, "t": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 4}, "g": {"docs": {"ultk.effcomm.agent.BayesianListener": {"tf": 1.4142135623730951}}, "df": 1}}, "y": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.initialize_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 31}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.LiteralSpeaker": {"tf": 1}, "ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.get_rd_curve": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 1.4142135623730951}, "ultk.effcomm.util.conditional": {"tf": 1.7320508075688772}, "ultk.effcomm.util.joint": {"tf": 1.7320508075688772}, "ultk.effcomm.util.marginalize": {"tf": 1.7320508075688772}, "ultk.effcomm.util.bayes": {"tf": 1.4142135623730951}}, "df": 9, "o": {"docs": {}, "df": 0, "u": {"docs": {"ultk": {"tf": 1.7320508075688772}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.tradeoff.interpolate_data": {"tf": 1}}, "df": 1}}, "s": {"docs": {"ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}}, "df": 2}}}}}, "|": {"docs": {}, "df": 0, "x": {"docs": {"ultk.effcomm.util.conditional": {"tf": 1}, "ultk.effcomm.util.joint": {"tf": 1}, "ultk.effcomm.util.marginalize": {"tf": 1}, "ultk.effcomm.util.bayes": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 1}}}}, "v": {"1": {"docs": {}, "df": 0, "i": {"0": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm": {"tf": 1.7320508075688772}, "ultk.effcomm.util": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 2}}, "df": 1}}}}}, "y": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"ultk.effcomm.analysis.trade_off_ttest": {"tf": 1.4142135623730951}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.7320508075688772}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1}}, "df": 7, "s": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 7}, "d": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.agent.Listener.normalized_weights": {"tf": 1}, "ultk.effcomm.util.rows_zero_to_uniform": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"ultk.language.language": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 2}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "s": {"docs": {"ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.effcomm.information.get_bottleneck": {"tf": 1.7320508075688772}}, "df": 2}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1.4142135623730951}}, "df": 1}}}, "y": {"docs": {"ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 1}}}}}}}}}}, "g": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.CommunicativeAgent.sample_strategy": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.Listener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.LiteralListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticSpeaker": {"tf": 1}, "ultk.effcomm.agent.PragmaticListener": {"tf": 1}, "ultk.effcomm.agent.BayesianListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.analysis.pearson_analysis": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1.4142135623730951}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1}, "ultk.language.semantics": {"tf": 1}}, "df": 21, "e": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.agent.Speaker.normalized_weights": {"tf": 1}, "ultk.effcomm.analysis.get_dataframe": {"tf": 1}, "ultk.effcomm.analysis.trade_off_means": {"tf": 1}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1.4142135623730951}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.grammar.Grammar.get_all_rules": {"tf": 1}, "ultk.language.language.Language.binary_matrix": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.sample_lang_size": {"tf": 1}, "ultk.language.sampling.random_combination_vocabulary": {"tf": 1}}, "df": 13, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.util.gNID": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.optimization.EvolutionaryOptimizer.fit": {"tf": 1}, "ultk.effcomm.optimization.EvolutionaryOptimizer.sample_mutated": {"tf": 1}, "ultk.effcomm.optimization.sample_parents": {"tf": 1}}, "df": 4, "s": {"docs": {"ultk.effcomm.optimization.EvolutionaryOptimizer.__init__": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.sampling.get_hypothetical_variants": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_expressions": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}}, "df": 9, "d": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.generate_languages": {"tf": 1.7320508075688772}, "ultk.language.sampling.sample_lang_size": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm": {"tf": 1}}, "df": 2, "s": {"docs": {"ultk": {"tf": 1.4142135623730951}, "ultk.effcomm.agent": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"ultk": {"tf": 1}, "ultk.language.grammar.Rule": {"tf": 2}, "ultk.language.grammar.GrammaticalExpression": {"tf": 1}, "ultk.language.grammar.GrammaticalExpression.yield_string": {"tf": 1}, "ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.parse": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.from_yaml": {"tf": 1.4142135623730951}}, "df": 10}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.GrammaticalExpression": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.parse": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 3, "s": {"docs": {"ultk.language.grammar.UniquenessArgs": {"tf": 1}, "ultk.language.grammar.Grammar": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate_at_depth": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.tradeoff.tradeoff": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"ultk.language.sampling.enumerate_all_languages": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}}, "df": 1, "n": {"docs": {"ultk.effcomm": {"tf": 1}, "ultk.effcomm.agent.CommunicativeAgent.strategy_to_indices": {"tf": 1}, "ultk.effcomm.agent.PragmaticSpeaker.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1.4142135623730951}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 1}, "ultk.effcomm.information.get_ib_curve": {"tf": 1}, "ultk.effcomm.information.get_bottleneck": {"tf": 1}, "ultk.effcomm.information.ib_informativity": {"tf": 1}, "ultk.effcomm.information.ib_comm_cost": {"tf": 1}, "ultk.effcomm.information.ib_encoder_to_point": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1.4142135623730951}, "ultk.language.grammar.Grammar.generate": {"tf": 1}, "ultk.language.grammar.Grammar.enumerate": {"tf": 1.4142135623730951}, "ultk.language.language.Language.degree_property": {"tf": 1}, "ultk.language.sampling.powerset": {"tf": 1}, "ultk.language.sampling.all_meanings": {"tf": 1}, "ultk.language.sampling.all_languages": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1.4142135623730951}}, "df": 18}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}, "ultk.effcomm.tradeoff.non_dominated_2d": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"ultk.effcomm.agent.LiteralListener": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"ultk.effcomm.agent.PragmaticListener.__init__": {"tf": 1}, "ultk.effcomm.informativity.informativity": {"tf": 1}, "ultk.effcomm.informativity.communicative_success": {"tf": 1}}, "df": 3}, "d": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 3.4641016151377544}, "ultk.effcomm.analysis.trade_off_ttest": {"tf": 2.449489742783178}, "ultk.language.language": {"tf": 4.898979485566356}, "ultk.language.sampling.random_languages": {"tf": 3.4641016151377544}, "ultk.language.sampling.generate_languages": {"tf": 4.242640687119285}, "ultk.language.semantics": {"tf": 5.196152422706632}}, "df": 6}}, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"ultk.effcomm.agent.CommunicativeAgent.to_language": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {"ultk": {"tf": 1}, "ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.optimization.sample_parents": {"tf": 1}, "ultk.language.grammar.Grammar.get_unique_expressions": {"tf": 1}, "ultk.language.sampling.upto_comb": {"tf": 1}, "ultk.language.sampling.random_languages": {"tf": 1}, "ultk.language.sampling.enumerate_all_languages": {"tf": 1}, "ultk.language.semantics.Meaning.__init__": {"tf": 1}}, "df": 6}}}}, "q": {"docs": {"ultk.effcomm.information.information_rate": {"tf": 1}, "ultk.effcomm.information.language_to_ib_encoder_decoder": {"tf": 1.4142135623730951}}, "df": 2, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"ultk": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {"ultk.language.sampling.generate_languages": {"tf": 1}, "ultk.language.sampling.sample_quasi_natural": {"tf": 1.7320508075688772}, "ultk.language.sampling.enumerate_all_languages": {"tf": 2.449489742783178}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.analysis.trade_off_means": {"tf": 2.449489742783178}, "ultk.language.language": {"tf": 1.4142135623730951}, "ultk.language.sampling.random_languages": {"tf": 2}, "ultk.language.sampling.generate_languages": {"tf": 2}, "ultk.language.semantics": {"tf": 1.4142135623730951}}, "df": 5}}}}, "x": {"docs": {"ultk.effcomm.information.expected_distortion": {"tf": 1.7320508075688772}, "ultk.effcomm.information.compute_rate_distortion": {"tf": 3.605551275463989}, "ultk.effcomm.information.blahut_arimoto": {"tf": 3.3166247903554}, "ultk.effcomm.tradeoff.pareto_min_distances": {"tf": 1.7320508075688772}, "ultk.effcomm.tradeoff.interpolate_data": {"tf": 1.4142135623730951}, "ultk.effcomm.tradeoff.tradeoff": {"tf": 1}, "ultk.effcomm.util.marginal": {"tf": 2}, "ultk.effcomm.util.conditional": {"tf": 2.23606797749979}, "ultk.effcomm.util.joint": {"tf": 2.449489742783178}, "ultk.effcomm.util.marginalize": {"tf": 2.23606797749979}, "ultk.effcomm.util.bayes": {"tf": 1.7320508075688772}, "ultk.effcomm.util.xlogx": {"tf": 1.4142135623730951}, "ultk.effcomm.util.H": {"tf": 2}, "ultk.effcomm.util.gNID": {"tf": 1.4142135623730951}, "ultk.language.sampling.rename_id": {"tf": 1.4142135623730951}}, "df": 15, "u": {"docs": {"ultk": {"tf": 1}}, "df": 1}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"ultk.effcomm.information.compute_rate_distortion": {"tf": 1}}, "df": 1}}}, "[": {"docs": {}, "df": 0, "i": {"docs": {"ultk.effcomm.information.blahut_arimoto": {"tf": 1}}, "df": 1}}, "|": {"docs": {}, "df": 0, "y": {"docs": {"ultk.effcomm.util.bayes": {"tf": 1}}, "df": 1}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();