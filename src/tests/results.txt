============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-7.4.3, pluggy-1.3.0 -- /Library/Frameworks/Python.framework/Versions/3.12/bin/python3.12
cachedir: .pytest_cache
rootdir: /Users/radmajik/Documents/UWLing/clmbrs/altk
collecting ... collected 17 items

test_grammar.py::TestGrammar::test_parse FAILED                          [  5%]
test_grammar.py::TestGrammar::test_meaning FAILED                        [ 11%]
test_grammar.py::TestGrammar::test_length FAILED                         [ 17%]
test_grammar.py::TestGrammar::test_yield FAILED                          [ 23%]
test_grammar.py::TestGrammar::test_enumerate PASSED                      [ 29%]
test_language.py::TestLanguage::test_exp_subset PASSED                   [ 35%]
test_language.py::TestLanguage::test_language_has_expressions PASSED     [ 41%]
test_language.py::TestLanguage::test_language_universe_check PASSED      [ 47%]
test_language.py::TestLanguage::test_language_degree PASSED              [ 52%]
test_language.py::TestLanguage::test_language_len PASSED                 [ 58%]
test_language.py::TestLanguage::test_language_equality PASSED            [ 64%]
test_semantics.py::TestSemantics::test_universe_from_df FAILED           [ 70%]
test_semantics.py::TestSemantics::test_referent_match PASSED             [ 76%]
test_semantics.py::TestSemantics::test_referent_mismatch PASSED          [ 82%]
test_semantics.py::TestSemantics::test_universe_match PASSED             [ 88%]
test_semantics.py::TestSemantics::test_universe_mismatch PASSED          [ 94%]
test_semantics.py::TestSemantics::test_meaning_subset PASSED             [100%]

=================================== FAILURES ===================================
____________________________ TestGrammar.test_parse ____________________________

self = <test_grammar.TestGrammar object at 0x103296fc0>

    def test_parse(self):
>       parsed_expression = TestGrammar.grammar.parse(TestGrammar.geq2_expr_str)

test_grammar.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ultk/language/grammar.py:222: in parse
    stack[-1].add_child(child)
../ultk/language/grammar.py:104: in add_child
    self.children = self.children + (child,)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='>', func=<function TestGrammar.<lambda> at 0x1019a1440>, children=())
name = 'children'
value = (GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='n', func=<function TestGrammar.<lambda> at 0x11cf2fce0>, children=None),)

>   ???
E   dataclasses.FrozenInstanceError: cannot assign to field 'children'

<string>:4: FrozenInstanceError
___________________________ TestGrammar.test_meaning ___________________________

self = <test_grammar.TestGrammar object at 0x11cb6d190>

    def test_meaning(self):
>       parsed_expression = TestGrammar.grammar.parse(TestGrammar.geq2_expr_str)

test_grammar.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ultk/language/grammar.py:222: in parse
    stack[-1].add_child(child)
../ultk/language/grammar.py:104: in add_child
    self.children = self.children + (child,)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='>', func=<function TestGrammar.<lambda> at 0x1019a1440>, children=())
name = 'children'
value = (GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='n', func=<function TestGrammar.<lambda> at 0x11cf2fce0>, children=None),)

>   ???
E   dataclasses.FrozenInstanceError: cannot assign to field 'children'

<string>:4: FrozenInstanceError
___________________________ TestGrammar.test_length ____________________________

self = <test_grammar.TestGrammar object at 0x11cbea360>

    def test_length(self):
>       parsed_expression = TestGrammar.grammar.parse(TestGrammar.geq2_expr_str)

test_grammar.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ultk/language/grammar.py:222: in parse
    stack[-1].add_child(child)
../ultk/language/grammar.py:104: in add_child
    self.children = self.children + (child,)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='>', func=<function TestGrammar.<lambda> at 0x1019a1440>, children=())
name = 'children'
value = (GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='n', func=<function TestGrammar.<lambda> at 0x11cf2fce0>, children=None),)

>   ???
E   dataclasses.FrozenInstanceError: cannot assign to field 'children'

<string>:4: FrozenInstanceError
____________________________ TestGrammar.test_yield ____________________________

self = <test_grammar.TestGrammar object at 0x101960800>

    def test_yield(self):
>       parsed_expression = TestGrammar.grammar.parse(TestGrammar.geq2_expr_str)

test_grammar.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../ultk/language/grammar.py:222: in parse
    stack[-1].add_child(child)
../ultk/language/grammar.py:104: in add_child
    self.children = self.children + (child,)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='>', func=<function TestGrammar.<lambda> at 0x1019a1440>, children=())
name = 'children'
value = (GrammaticalExpression(form='', meaning=Meaning(referents=(), universe=Universe(referents=(), prior=None), _dist=None), rule_name='n', func=<function TestGrammar.<lambda> at 0x11cf2fce0>, children=None),)

>   ???
E   dataclasses.FrozenInstanceError: cannot assign to field 'children'

<string>:4: FrozenInstanceError
_____________________ TestSemantics.test_universe_from_df ______________________

self = <test_semantics.TestSemantics object at 0x11cf4c5f0>

    def test_universe_from_df(self):
>       assert TestSemantics.points == [
            referent.__dict__ for referent in TestSemantics.universe.referents
        ]
E       AssertionError: assert [{'name': 'weak+epistemic', 'force': 'weak', 'flavor': 'epistemic'}, {'name': 'weak+deontic', 'force': 'weak', 'flavor': 'deontic'}, {'name': 'strong+epistemic', 'force': 'strong', 'flavor': 'epistemic'}, {'name': 'strong+deontic', 'force': 'strong', 'flavor': 'deontic'}] == [{'name': 'weak+epistemic', 'force': 'weak', 'flavor': 'epistemic', '_frozen': True}, {'name': 'weak+deontic', 'force': 'weak', 'flavor': 'deontic', '_frozen': True}, {'name': 'strong+epistemic', 'force': 'strong', 'flavor': 'epistemic', '_frozen': True}, {'name': 'strong+deontic', 'force': 'strong', 'flavor': 'deontic', '_frozen': True}]
E         At index 0 diff: {'name': 'weak+epistemic', 'force': 'weak', 'flavor': 'epistemic'} != {'name': 'weak+epistemic', 'force': 'weak', 'flavor': 'epistemic', '_frozen': True}
E         Full diff:
E           [
E         -  {'_frozen': True,
E         -   'flavor': 'epistemic',
E         ?  ^
E         +  {'flavor': 'epistemic',
E         ?  ^
E             'force': 'weak',
E             'name': 'weak+epistemic'},
E         -  {'_frozen': True,
E         -   'flavor': 'deontic',
E         ?  ^
E         +  {'flavor': 'deontic',
E         ?  ^
E             'force': 'weak',
E             'name': 'weak+deontic'},
E         -  {'_frozen': True,
E         -   'flavor': 'epistemic',
E         ?  ^
E         +  {'flavor': 'epistemic',
E         ?  ^
E             'force': 'strong',
E             'name': 'strong+epistemic'},
E         -  {'_frozen': True,
E         -   'flavor': 'deontic',
E         ?  ^
E         +  {'flavor': 'deontic',
E         ?  ^
E             'force': 'strong',
E             'name': 'strong+deontic'},
E           ]

test_semantics.py:26: AssertionError
=============================== warnings summary ===============================
../../../../../../../../Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/dateutil/tz/tz.py:37
  /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/dateutil/tz/tz.py:37: DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
    EPOCH = datetime.datetime.utcfromtimestamp(0)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_grammar.py::TestGrammar::test_parse - dataclasses.FrozenInstanceE...
FAILED test_grammar.py::TestGrammar::test_meaning - dataclasses.FrozenInstanc...
FAILED test_grammar.py::TestGrammar::test_length - dataclasses.FrozenInstance...
FAILED test_grammar.py::TestGrammar::test_yield - dataclasses.FrozenInstanceE...
FAILED test_semantics.py::TestSemantics::test_universe_from_df - AssertionErr...
=================== 5 failed, 12 passed, 1 warning in 0.27s ====================
